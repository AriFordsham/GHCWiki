= `-Wcompat`

With GHC 8.0 we have implemented a new warning-group `-Wcompat` (see
#11000) to comprise warnings that will be enabled by default in the
future, but remain off in normal compilations for the time
being. This​ allows library authors eager to make their code future
compatible to adapt​ to new features before they even generate
warnings, and even later probably turn into actual compile errors.

However, there is one important design choice left regarding the default:

A. Opt-in style  (`-Wall` does **not include** `-Wcompat`):
  - Users who desire warnings about upcoming changes: `-Wall -Wcompat`
  - Users who dislike such warnings: `-Wall`

B. Opt-out style (`-Wall` **includes** `-Wcompat`):
  - Users who desire warnings about upcoming changes: `-Wall`
  - Users who dislike such warnings: `-Wall -Wno-compat`

== Arguments **for (B) opt-out** / against opt-in style ==

 If we don't enable `-Wcompat` by default, discoverability suffers::
  Most users know mostly about `-Wall` but not about
  `-Wcompat`, and even if `-Wcompat` becomes better known, maybe they
  won't bother (or simply forget) to turn on `-Wcompat`.

  The most effective way to reach everybody is by enabling `-Wcompat`
  by default and have them opt-out if they don't like it.

 This warnings are just noisy and don't cause actual problems until `-Werror` is enabled::
  This means that the change won't cause problems for Hackage since Hackage rejects packages with `-Werror` anyway).

  If somebody enables `-Wall`, they're already asking for some noise.
  Especially since `-Wall`'s effect changes with each GHC release.

 The user may expect that `-Wall` enables all warnings::
  Adding more ad-hoc exceptions than already exist further breaks this expectation.

== Arguments **for (A) opt-in** / against opt-out style ==

 Users of `-Wall` will need Cabal file boilerplate to disable `-Wcompat`::
  Packages insisting on `-Wall` cleanliness while supporting pre-GHC-8.0 need to add boilerplate
  in their cabal files to silence compatibility warnings:
  {{{
    ghc-options: -Wall
    if impl(ghc >` 8)
       ghc-options: -Wno-compat
  }}}
  However, as [https://mail.haskell.org/pipermail/ghc-devs/2016-January/010955.html|stated previously],
  `-Wall` is intended for use during development. Therefore, we discourage the use of `-Wall`
  in released projects.

 Inclusion in `-Wall` raises the bar for inclusion in `-Wcompat`::
  Having `-Wcompat` separate from `-Wall` allows us to include
  more verbose warnings to `-Wcompat` that would be questionable in `-Wall`

 `-Wcompat` warnings aren't necessarily actionable::
  `-Wcompat` warnings aren't necessarily actionable if backwards
  compatibility is desired; if they were, they'd be in `-Wall`. The
  point of `-Wcompat` was to give notice to folks who wanted them as soon
  as possible, even if they were things they couldn't do, yet moving
  them into `-Wall` means that this whole thing becomes a big mess of
  active maintenance

 May deter three-release policy compliance::
  If `-Wcompat` was on by default, less or maybe no users at all would
  bother about the three-release policy at all, as it would add another
  hoop to jump through, i.e.  requires to actively opt out via
  `-Wno-compat`.
