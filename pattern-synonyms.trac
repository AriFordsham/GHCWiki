= Pattern Synonyms =
Most language entities in Haskell can be named so that they can be abbreviated instead of written out in full.
This proposal provides the same power for patterns.

See the [wiki:PatternSynonyms/Implementation implementation] page for implementation details.

Relevant closed tickets:
 * #5144 (Pattern synonyms [https://github.com/ghc/ghc/commit/4f8369bf47d27b11415db251e816ef1a2e1eb3d8 merged into master] on 20 January 2014)
 * #8968 (GADTs)
 * #9417 (Haddock)
 * #9514 (Haddock again)
 * #8584 (pattern type signatures)

Relevant open tickets:
 * #8581 (explicitly bidirectional)
 * #8582 (Record patterns)
 * #8583 (Associated patterns)
 * #8761 (template haskell support)
 * #8779 (exhaustiveness checks)
 * #10783 (partial type signatures in pattern synonym signatures)
 * #10653 (Associated pattern synonyms with types)

== Motivating example ==
Here is a simple representation of types
{{{
    data Type = App String [Type]
}}}
Using this representations the arrow type looks like `App "->" [t1, t2]`.
Here are functions that collect all argument types of nested arrows and recognize the `Int` type:
{{{
   collectArgs :: Type -> [Type]
   collectArgs (App "->" [t1, t2]) = t1 : collectArgs t2
   collectArgs _ = []

   isInt (App "Int" []) = True
   isInt _ = False
}}}
Matching on `App` directly is both hard to read and error prone to write.

The proposal is to introduce a way to give patterns names:
{{{
   pattern Arrow t1 t2 = App "->" [t1, t2]
   pattern Int = App "Int" []
}}}
And now we can write
{{{
   collectArgs :: Type -> [Type]
   collectArgs (Arrow t1 t2) = t1 : collectArgs t2
   collectArgs _ = []

   isInt Int = True
   isInt _ = False
}}}

Here is a second example from [http://www.reddit.com/r/haskell/comments/1kmods/patternsynonyms_ghc_trac/ pigworker on Reddit].
Your basic sums-of-products functors can be built from this kit.
{{{
newtype K a        x  = K a
newtype I          x  = I x
newtype (:+:) f g  x  = Sum (Either (f x) (g x))
newtype (:*:) f g  x  = Prod (f x, g x)
}}}
and then you can make recursive datatypes via
{{{
newtype Fix f = In (f (Fix f))
}}}
e.g.,
{{{
type Tree = Fix (K () :+: (I :*: I))
}}}
and you can get useful generic operations cheaply because the functors in the kit are all `Traversable`, admit a partial zip operation, etc.

You can define friendly constructors for use in expressions
{{{
leaf :: Tree
leaf = In (Sum (Left (K ())))
node :: Tree -> Tree -> Tree
node l r = In (Sum (Right (Prod (I l, I r))))
}}}
but any `Tree`-specific pattern matching code you write will be wide and obscure. Turning these definitions into pattern synonyms means you can have both readable type-specific programs and handy generics without marshalling your data between views.

== Uni-directional (pattern-only) synonyms ==

The simplest form of pattern synonyms is the one from the examples above.  The grammar rule is:

`pattern` ''conid'' ''varid,,1,,'' ... ''varid,,n,,'' `<-` ''pat''

`pattern` ''varid,,1,,'' ''consym'' ''varid,,2,,'' `<-` ''pat''

 * Each of the variables on the left hand side must occur exactly once on the right hand side 
 * Pattern synonyms are not allowed to be recursive.  Cf. type synonyms.

{{{#!td
There have been several proposals for the syntax of defining pattern-only synonyms:
* `pattern` ''conid'' ''varid,,1,,'' ... ''varid,,n,,'' `~` ''pat''
* `pattern` ''conid'' ''varid,,1,,'' ... ''varid,,n,,'' `:=` ''pat''
* `pattern` ''conid'' ''varid,,1,,'' ... ''varid,,n,,'' `->` ''pat''
* `pattern` ''conid'' ''varid,,1,,'' ... ''varid,,n,,'' `<-` ''pat''
}}}


Pattern synonyms can be exported and imported by prefixing the ''conid'' with the keyword `pattern`:

{{{
   module Foo (pattern Arrow) where ...
}}}

This is required because pattern synonyms are in the namespace of constructors, so it's perfectly valid to have

{{{
   data P = C
   pattern P = 42
}}}

You may also give a type signature for a pattern, but as with most other type signatures in Haskell it is optional:

`pattern` ''conid'' `::` ''type''

E.g.
{{{
   pattern Arrow :: Type -> Type -> Type
   pattern Arrow t1 t2 <- App "->" [t1, t2]
}}}

Together with ViewPatterns we can now create patterns that look like regular patterns to match on existing (perhaps abstract) types in new ways:

{{{
import qualified Data.Sequence as Seq

pattern Empty <- (Seq.viewl -> Seq.EmptyL)
pattern x :< xs <- (Seq.viewl -> x Seq.:< xs)
pattern xs :> x <- (Seq.viewr -> xs Seq.:> x)
}}}


== Simply-bidirectional pattern synonyms ==

In cases where ''pat'' is in the intersection of the grammars for patterns and expressions (i.e. is valid both as an expression and a pattern), the pattern synonym can be made bidirectional, and can be used in expression contexts as well. Bidirectional pattern synonyms have the following syntax:

`pattern` ''conid'' ''varid,,1,,'' ... ''varid,,n,,'' `=` ''pat''

`pattern` ''varid,,1,,'' ''consym'' ''varid,,2,,'' `=` ''pat''



For example, the following two pattern synonym definitions are rejected, because they are not bidirectional (but they would be valid as pattern-only synonyms)

{{{
   pattern ThirdElem x = _:_:x:_
   pattern Snd y = (x, y)
}}}

since the right-hand side is not a closed expression of {''x''} and {''y''} respectively.

In contrast, the pattern synonyms for ''Arrow'' and ''Int'' above are bidirectional, so you can e.g. write:

{{{
   arrows :: [Type] -> Type -> Type
   arrows = flip $ foldr Arrow
}}}


== Explicitly-bidirectional pattern synonyms ==

What if you want to use `Succ` in an expression:

{{{
    pattern Succ n <- n1 | let n = n1 -1, n >= 0
}}}

It's clearly impossible since its expansion is a pattern that has no meaning as an expression.
Nevertheless, if we want to make what looks like a constructor for a type we will often want to use it in both patterns and expressions.
This is the rationale for the most complicated synonyms, the bidirectional ones.  They provide two expansions, one for patterns and one for expressions.

`pattern` ''conid'' ''varid,,1,,'' ... ''varid,,n,,'' `<-` ''pat'' `where` ''cfunlhs'' ''rhs''

where ''cfunlhs'' is like ''funlhs'', except that the functions symbol is a ''conid'' instead of a ''varid''.

Example:
{{{
   pattern Succ n <- n1 | let n = n1-1, n >= 0 where
      Succ n = n + 1
}}}

'''TODO''': Rewrite this example to not use ViewPatternsAlternative

The first part as is before and describes the expansion of the synonym in patterns. The second part describes the expansion in expressions.

{{{
   fac 0 = 0
   fac (Succ n) = Succ n * fac n 
}}}

== Associated pattern synonyms ==
Just like data types and type synonyms can be part of a class declaration, it would be possible to have pattern synonyms as well.

Example:
{{{
   class ListLike l where
      pattern Nil :: l a
      pattern Cons :: a -> l a -> a
      isNil :: l a -> Bool
      isNil Nil = True
      isNil (Cons _ _) = False
      append :: l a -> l a -> l a

   instance ListLike [] where
      pattern Nil = []
      pattern Cons x xs = x:xs
      append = (++)

   headOf :: (ListLike l) => l a -> Maybe a
   headOf Nil = Nothing
   headOf (Cons x _) = Just x
}}}

One could go one step further and leave out the `pattern` keyword to obtain ''associated constructors'', which are required to be bidirectional. The capitalized identifier would indicate that a pattern synonym is being defined. For complicated cases one could resort to the `where` syntax (shown above).

'''TODO''': Syntax for associated pattern synonym declarations to discern between pattern-only and bidirectional pattern synonyms

== Static semantics == 

A unidirectional pattern synonym declaration has the form

{{{
pattern P var1 var2 ... varN <- pat
}}}

The formal pattern synonym arguments `var1`, `var2`, ..., `varN` are brought
into scope by the pattern pat on the right-hand side. The declaration
brings the name `P` as a pattern synonym into the module-level scope.

The pattern synonym `P` is assigned a //pattern type// of the form

{{{
pattern P :: CProv => CReq => t1 -> t2 -> ... -> tN -> t 
}}}

where `t1`, ..., `tN` are the types of the parameters `var1`, ..., `varN`, `t` is the simple type (with no context) of the thing getting matched, and `CReq` and `CProv` are type contexts.

`CReq` can be omitted if it is empty. If `CProv` is empty, but `CReq` is not, `()` is used. The following example shows cases:

{{{
data Showable where
    MkShowable :: (Show a) => a -> Showable

-- Required context is empty
pattern Sh :: (Show a) => a -> Showable
pattern Sh x <- MkShowable x

-- Provided context is empty, but required context is not
pattern One :: () => (Num a, Eq a) => a
pattern One <- 1
}}}

A pattern synonym can be used in a pattern if the
instatiated (monomorphic) type satisfies the constraints of
`CReq`. In this case, it extends the context available in the
right-hand side of the match with `CProv`, just like how an
existentially-typed data constructor can extend the context.

As with function and variable types, the pattern type signature can be inferred, or it can be explicitly written out on the program. 

Here's a more complex example. Let's look at the following definition:

{{{
{-# LANGUAGE PatternSynonyms, GADTs, ViewPatterns #-}
module ShouldCompile where

data T a where
	MkT :: (Eq b) => a -> b -> T a

f :: (Show a) => a -> Bool

pattern P x <- MkT (f -> True) x
}}}

Here, the inferred type of `P` is

{{{
pattern P :: (Eq b) => (Show a) => b -> T a
}}}

A bidirectional pattern synonym declaration has the form

{{{
pattern P var1 var2 ... varN = pat
}}}

where both of the following are well-typed declarations:

{{{
pattern P1 var1 var2 ... varN <- pat

P2 = \var1 var2 ... varN -> pat
}}}

In this case, the //pattern type// of `P` is simply the pattern type
of `P1`, and its //expression type// is the type of `P2`. The name `P`
is brought into the module-level scope both as a pattern synonym and
as an expression.



== Dynamic semantics ==

A pattern synonym occurance in a pattern is evaluated by first
matching against the pattern synonym itself, and then on the argument
patterns. For example, given the following definitions:

{{{
pattern P x y <- [x, y]

f (P True True) = True
f _             = False

g [True, True] = True
g _            = False
}}}

the behaviour of `f` is the same as

{{{
f [x, y] | True <- x, True <- y = True
f _                             = False
}}}

Because of this, the eagerness of `f` and `g` differ:

{{{
*Main> f (False:undefined)
*** Exception: Prelude.undefined
*Main> g (False:undefined)
False
}}}

== Typed pattern synonyms ==

So far patterns only had ''syntactic'' meaning. In comparison [http://code.google.com/p/omega Ωmega] has ''typed'' pattern synonyms, so they become first class values. For bidirectional pattern synonyms this seems to be the case
{{{
data Nat = Z | S Nat deriving Show
pattern Ess p = S p
}}}
And it works:
{{{
*Main> map S [Z, Z, S Z]
[S Z,S Z,S (S Z)]
*Main> map Ess [Z, Z, S Z]
[S Z,S Z,S (S Z)]
}}}

== Branching pattern-only synonyms ==

''N.B. this is a speculative suggestion!

Sometimes you want to match against several summands of an ADT simultaneously. E.g. in a data type of potentially unbounded natural numbers:
{{{
data Nat = Zero | Succ Nat
type UNat = Maybe Nat -- Nothing meaning unbounded
}}}
Conceptually `Nothing` means ''infinite'', so it makes sense to interpret it as a ''successor'' of something. We wish it to have a predecessor just like `Just (Succ Zero)`!

I suggest ''branching pattern synonyms'' for this purpose:
{{{
pattern S pred <- pred@Nothing | pred@(Just a <- Just (Succ a))
pattern Z = Just Zero
}}}
Here `pred@(Just a <- Just (Succ a))` means that the pattern invocation `S pred` matches against `Just (Succ a)` and - if successful - binds `Just a` to `pred`.

This means we can syntactically address unbound naturals just like bounded ones:
{{{
greetTimes :: UNat -> String -> IO ()
greetTimes Z _ = return ()
greetTimes (S rest) message = putStrLn message >> greetTimes rest message
}}}

As a nice collateral win this proposal handles `pattern Name name <- Person name workplace | Dog name vet` too.

== Record Pattern Synonyms == 

Normal pattern synonyms provide a convenient way to abstract away from ADTs by explicitly defining the meaning of the pattern and the ability to define the constructor.

Currently there is no way to similar way to project an existing datatype to a record.
Adding this feature provides completeness as pattern synonyms would become equally expressive as ordinary data type declarations. 

=== Design ===

The proposed syntax is as follows

{{{
pattern Foo{bar, baz} = (bar, baz)
}}}

which overloads the syntax for named field puns. 

If a unidirectional pattern is declared then the pattern along with record selectors are provided. The following five definitions are equivalent.

{{{
getFst1 Foo{bar} = bar

getFst2 Foo{bar=qux} = qux

getFst3 Foo{..} = bar

getFst4 (Foo v _) = v

getFst5 v = bar v
}}}


When a bidirectional synonym is declared then the constructor `Foo` is also declared which can be used in two ways.

{{{
myFoo = Foo "first" 2

hisFoo = Foo { bar = "first", baz = 2 }
}}}

Finally we consider record updates.

{{{
updateBaz x = x {baz = 6}
}}}


An unresolved design point is how record updates should be handled. Given Foo is in scope then there is an unambiguous type for this expression (as baz is uniquely a selector for `Foo`). Thus the inferred type of `updateBaz` would be `updateBaz :: (a, b) -> (Int, b)`. 

This whole construct seems quite strange as it would also seem possible to write (the currently illegal)  `(1,2) {baz = Just 6}` as well as `(Foo 1 2) { baz = Just 6}`. Currently pattern synonyms do not change the semantics of programs outside from the explicit use of the synonym. This example is slightly different as we do not use `Foo` but merely the field name `baz`. I am not sure whether this would be confusing to users.

=== Tricky bits ===

* There is now a potential ambiguity.

{{{
data D = MkD { foo :: Int }
pattern Pat = MkD { foo = Int }

baz = Pat { foo = 5 }
}}}

    Here, I'm intending `Pat { foo = 5 }` to be a record //update//, not a record //construction//. But it's confusing! Does this work?

==== Answer ====

Not currently - `baz` is parsed as a `RecordCon` which then fails as `Pat` is not a constructor with field `foo`.


* Import/export syntax has to be extended to accommodate the field labels. So, if we have

{{{
pattern Pat { a } = Just a
}}}

    then we should be able to write any of the following in an export list: `pattern Pat`, `pattern Pat(..)`, `pattern Pat(a)`. (The last two mean the same thing.) It would only be logical to extend this syntax to also allow record data constructors to operate the same way. Question: should record data constructors be allowed to use this syntax when exported without the `pattern` keyword?

== Associating synonyms with types ==

This section is based upon #10653.

Pattern synonyms allow for constructors to be defined, exported and imported separately from the types which they build.
However, it is sometimes convenient to associate synonyms with types so that we can more closely model ordinary data constructors.

If we want to refactor to change the internal representation of this maybe-like type to use Maybe.

{{{
-- Main.hs
module Main where

import Internal ( A(..))

-- Internal.hs
module Internal where

data A = MkA Int | NoA
}}}

If we modify `Internal.hs` as follows

{{{
{-# LANGUAGE PatternSynonyms #-}
module Internal where

newtype A = NewA (Just Int)

pattern MkA n = A (Just n)

pattern NoA = A Nothing
}}}

Then local definitions to `Internal` which used `A` would work as before but modules importing `Internal` and `A`
will no longer work as importing `A(..)` will import the type `A` and the constructor `NewA`. We can explicitly import the
new patterns but the usage of pattern synonyms should be transparent to the end user. What's needed is to be able to
associate the new synonyms with a type such that client code is oblivious to this implementation.

=== Proposal 1 ===

Richard proposes that synonyms are associated at the export of a datatype. Our running example would then look as follows:

{{{
{-# LANGUAGE PatternSynonyms #-}
module Internal(A(MkA, NoA)) where

newtype A = NewA (Just Int)

pattern MkA n = A (Just n)

pattern NoA = A Nothing
}}}

=== Proposal 2 ===

Simon proposes that synonyms are associated at the definition of a datatype. Our running example would look as follows:

{{{
{-# LANGUAGE PatternSynonyms #-}
module Internal(A(MkA, NoA)) where

newtype A = NewA (Just Int)
    with (MkA, NoA)

pattern MkA n = A (Just n)

pattern NoA = A Nothing
}}}

In the rest of the discussion I refer to Richard's suggestion rather than Simon's refinement. 
Consider two packages `old-rep` and `new-rep` which have  different representations of the same structure. 
The library author wants to smooth the transition for his users by providing a compatibility package `compat-rep`
so that code using the old representation in `old-rep` can work seamlessly with `new-rep`. 

The problem is to define `compat-rep` such that by changing the dependencies of our package, our code to continues to work
but without depending on `old-rep`. More generally, an author may want to write a `*-compat` package for two packages which they do
not control. Having to define these synonyms at the definition site is too restrictive for this case .

In both cases it is noted that the type of the associated synonym should be checked to ensure it matches with the other constructors.

=== Unnatural Association ===

There is some discussion about what should happen with synonyms which target types defined in the prelude. 
It is very uncommon to explicitly import datatypes defined in the prelude, thus this kind of association is very rare in practice
but should be allowed.

=== Module Chasing ===

Simon is a bit worried that once we allow this association then there is no limit to the number of constructors which
can be associated with a type. With normal datatypes, `T(..)` means some subset of the constructors defined where `T` is
defined. With this proposal `T(..)` has no maximal meaning, I don't see any problem with this behaviour as the meaning can still
be determined by the renamer.

=== The Privilege Objection ===

Simon also wonders why it is possible to privilege pattern synonyms in this way and not normal functions for example.
I don't think this is particularly puzzling as at their most general pattern synonyms allow for the definition of unassociated 
data constructors. Being able to later associate them with types only brings their behaviour closer to ordinary data constructors.

=== Polymorphic Synonyms ===

The following is a valid pattern synonym declaration which doesn't have a definite constructor.

{{{
{-# LANGUAGE PatternSynonyms, ViewPatterns #-}
module Foo where

class C f where
  build :: a -> f a
  destruct :: f a -> a

pattern P :: () => C f => a -> f a
pattern P x <- (destruct -> x)
  where
    P x = build x
}}}

I propose that we allow such synonyms to be associated with a type `T` as long as it typechecks. I don't expect this to be much used in practice. 

=== Specification ===

This proposal only changes module imports and exports. 

==== Definition ====

We say that "a pattern synonym `P` is associated with a type `T` relative to module `M`" if and only if "`M` exports `T` whilst associating `P`". 

'''SLPJ''': this definition simply defines one three-place term in terms of another equally-undefined three-place term.  Would be possible to abandon one form of words or the other.

==== Exports ====

'''SLPJ''' OK here comes the definition of the latter term.  Good.

For any modules `M` `N`, we say that "`M` exports `T` whilst associating `P`" either when

* The export has the form `T(c1, ..., cn, P)` where c1 to cn are a mixture of other field names, constructors and pattern synonyms. 

  This mixture of other stuff may include the special token `..`, which indicates either 1) all constructors and field names from `T`'s declaration, if `T` is declared in this module; or 2) all symbols imported with `T`, which might perhaps include patterns associated with `T` in some other module. In case (2), `..` might in fact be a union of sets, if `T` is imported from multiple modules with different sets of associated definitions.

'''SLPJ'''  This seems odd.  Example:
{{{
module M( T(A,B,P) ) where
  data T = A | B
  pattern P = Nothing
}}}
Is this ok?  Does `M` export `T` whilst associating `P`?  Do you really mean to allow pattern synonyms to be associated with entirely unrelated types?

'''MP''' Yes, this is ok with the current proposal. 

Can a pattern synonym be associated with more than one type?

'''MP''' Yes, this could also be useful in the case of polymorphic synonyms such as the example in the above section.

Could you give examples ti illustrate the re-export thing?  Which I do not understand.

'''MP''' I have added examples in a new section below.

'''SLPJ''' this second bullet does not seem to be part of the definition of "`M` exports `T` whilst associating `P`".  Correct?

'''MP''' No, this second section describes the case when `T` is not defined in `M`. The first case solely concerns when `T` ''is'' defined in `M`.  

* In the case of the abbreviated form `T(..)`, If `M` imports `T` from `N` then `T(..)` names the type and any constructors and field names which are in scope as well as any pattern synonyms (in scope) which are associated to `T` relative to `N`. 

==== Imports ====

For any modules `M` `N`, if we import `N` from `M`,

* The abbreviated form `T(..)` brings into scope all the constructors, methods or field names exported by `N` as well any patterns associated with `T` relative to `N`. 
* The explicit form `T(c1,...,cn)` can name any constructors, methods or field names exported by `N` as well as any patterns associated with `T` relative to `N`. 

==== Clarification ====

* Associated patterns are '''not''' typechecked to ensure that their type matches the type they are associated with.

* Hence, all synonyms must be initially explicitly associated but a module which imports an associated synonym is oblivious to whether they import a synonym or a constructor.

* According to this proposal, only pattern synonyms may be associated with a datatype. But it would be trivial to expand this proposal to allow arbitrary associations. 

==== Examples ====

{{{#!hs
module N(T(.., P)) where

data T = MkT Int

pattern P = MkT 5

-- M.hs
module M where

import N (T(..))
}}}


`P` is associated with `T` relative to `N`. M imports `T`, `MkT` and `P`.

{{{#!hs
module N(T(..)) where

data T = MkT Int

pattern P = MkT 5

-- M.hs
module M where

import N (T(..))
}}}

`P` is unassociated. `M` imports `T` and `MkT`. 


{{{#!hs
module N(T(P)) where

data T = MkT Int

pattern P = MkT 5

-- M.hs
module M where

import N (T(..))
}}}

`P` is associated with `T` relative to `N`. M imports `T`, and `P`.

{{{#!hs
module N(T(P)) where

data T = MkT Int

pattern P = MkT 5

-- M.hs
module M (T(..)) where

import N (T(..))

-- O.hs
module O where

import M (T(..))
}}}

`P` is associated with `T` relative to `N`.

As `M` imports `N` and imports `T`, `P` is associated with `T` relative to `M`. Thus `M` exports `T` and `P`.

Therefore when `O` imports `T(..)` from `M`, it also imports `P`. 

{{{#!hs
module N(T(..)) where

data T = MkT Int

-- M.hs
module M(T(P)) where

import N (T(..))

pattern P = MkT 5

-- O.hs
module O where

import M (T(..))
}}}

This example highlights being able to freely reassociate synonyms. 

`M` imports `T` and `MkT` from `N` but then as `M` associates `P` with `T`, when `O` imports `M`, `T` and `P` are brought into scope. 
