
= Dynamic by default =

== Performance ==

Full nofib results showing the effect of switching to dynamic-by-default are available for 
[http://lambda.haskell.org/~igloo/dynamic-by-default/nofib-osx-x86_64.html OS X x86_64],
[http://lambda.haskell.org/~igloo/dynamic-by-default/nofib-osx-x86.html OS X x86],
[http://lambda.haskell.org/~igloo/dynamic-by-default/nofib-linux-x86_64.html Linux x86_64] and
[http://lambda.haskell.org/~igloo/dynamic-by-default/nofib-linux-x86.html Linux x86]. There is also a table of the highlights below. In summary:

Binary sizes are way down across the board, as we are now dynamically linking to the libraries.

Things are rosiest on OS X x86_64. On this platform, `-fPIC` is always on, so using dynamic libraries doesn't mean giving up a register for PIC. Overall, performance is a few percent ''better'' with dynamic by default.

On OS X x86, the situation is not so nice. On x86 we are very short on registers, and giving up another for PIC means we end up around 15% down on performance.

On Linux x86_64 we have more registers, so the effect of giving one up for PIC isn't so pronounced, but we still lose a few percent performance overall.

For unknown reasons, x86 Linux suffers even worse than x86 OS X, with around a 30% performance penalty.

{{{
#!html
<table border="1">
<tr><td></td>
    <th style="font-weight: bold;">static -> dynamic<br />on OS X x86_64</th>
    <th style="font-weight: bold;">static -> dynamic<br />on OS X x86</th>
    <th style="font-weight: bold;">static -> dynamic<br />on Linux x86_64</th>
    <th style="font-weight: bold;">static -> dynamic<br />on Linux x86</th>
</tr>

<tr><td colspan="5" style="font-weight: bold;">Binary Sizes</td></tr>
<tr><td>-1 s.d.</td><td>-95.8%</td><td>-95.8%</td><td>-95.8%</td><td>-95.9%</td></tr>
<tr><td>+1 s.d.</td><td>-93.1%</td><td>-92.8%</td><td>-92.6%</td><td>-92.4%</td></tr>
<tr><td>Average</td><td style="color: green">-94.6%</td><td style="color: green">-94.5%</td><td style="color: green">-94.5%</td><td style="color: green">-94.4%</td></tr>

<tr><td colspan="5" style="font-weight: bold;">Run Time</td></tr>
<tr><td>-1 s.d.</td><td>-1.2%</td><td>+11.7%</td><td>-2.5%</td><td>+16.6%</td></tr>
<tr><td>+1 s.d.</td><td>+1.6%</td><td>+20.0%</td><td>+9.6%</td><td>+40.3%</td></tr>
<tr><td>Average</td><td style="color: red">+0.2%</td><td style="color: red">+15.8%</td><td style="color: red">+3.3%</td><td style="color: red">+27.9%</td></tr>

<tr><td colspan="5" style="font-weight: bold;">Elapsed Time</td></tr>
<tr><td>-1 s.d.</td><td>-6.9%</td><td>+10.3%</td><td>-2.5%</td><td>+16.6%</td></tr>
<tr><td>+1 s.d.</td><td>-0.3%</td><td>+20.4%</td><td>+9.6%</td><td>+40.3%</td></tr>
<tr><td>Average</td><td style="color: green">-3.7%</td><td style="color: red">+15.2%</td><td style="color: red">+3.3%</td><td style="color: red">+27.9%</td></tr>

<tr><td colspan="5" style="font-weight: bold;">Mutator Time</td></tr>
<tr><td>-1 s.d.</td><td>-1.3%</td><td>+8.9%</td><td>-5.0%</td><td>+18.3%</td></tr>
<tr><td>+1 s.d.</td><td>+1.9%</td><td>+18.3%</td><td>+7.5%</td><td>+46.8%</td></tr>
<tr><td>Average</td><td style="color: red">+0.3%</td><td style="color: red">+13.5%</td><td style="color: red">+1.1%</td><td style="color: red">+31.8%</td></tr>

<tr><td colspan="5" style="font-weight: bold;">Mutator Elapsed Time</td></tr>
<tr><td>-1 s.d.</td><td>-4.5%</td><td>+7.7%</td><td>-5.0%</td><td>+18.3%</td></tr>
<tr><td>+1 s.d.</td><td>+0.3%</td><td>+18.8%</td><td>+7.5%</td><td>+46.8%</td></tr>
<tr><td>Average</td><td style="color: green">-2.1%</td><td style="color: red">+13.1%</td><td style="color: red">+1.1%</td><td style="color: red">+31.8%</td></tr>

<tr><td colspan="5" style="font-weight: bold;">GC Time</td></tr>
<tr><td>-1 s.d.</td><td>-1.4%</td><td>+16.3%</td><td>+5.6%</td><td>+13.4%</td></tr>
<tr><td>+1 s.d.</td><td>+1.8%</td><td>+27.1%</td><td>+11.2%</td><td>+24.0%</td></tr>
<tr><td>Average</td><td style="color: red">+0.2%</td><td style="color: red">+21.6%</td><td style="color: red">+8.4%</td><td style="color: red">+18.6%</td></tr>

<tr><td colspan="5" style="font-weight: bold;">GC Elapsed Time</td></tr>
<tr><td>-1 s.d.</td><td>-1.5%</td><td>+15.8%</td><td>+5.6%</td><td>+13.4%</td></tr>
<tr><td>+1 s.d.</td><td>+1.3%</td><td>+25.6%</td><td>+11.2%</td><td>+24.0%</td></tr>
<tr><td>Average</td><td style="color: green">-0.1%</td><td style="color: red">+20.6%</td><td style="color: red">+8.4%</td><td style="color: red">+18.6%</td></tr>

<tr><td colspan="5" style="font-weight: bold;">Compile Times</td></tr>
<tr><td>-1 s.d.</td><td>-11.7%</td><td>+6.2%</td><td>-1.8%</td><td>+27.0%</td></tr>
<tr><td>+1 s.d.</td><td>-0.5%</td><td>+18.2%</td><td>+7.8%</td><td>+37.8%</td></tr>
<tr><td>Average</td><td style="color: green">-6.3%</td><td style="color: red">+12.1%</td><td style="color: red">+2.9%</td><td style="color: red">+32.3%</td></tr>
</table>
}}}

== OS X x86 vs x86_64 ==

Currently, some people use the x86 version of GHC on OS X for performance reasons. It's not clear for how much longer this will be viable, as other OS X libraries start dropping x86 support.

Full nofib results comparing the two are
[http://lambda.haskell.org/~igloo/dynamic-by-default/nofib-osx-x86-x86_64-base.html here for static by default], and
[http://lambda.haskell.org/~igloo/dynamic-by-default/nofib-osx-x86-x86_64-dyn.html here for dynamic by default], but the highlights are in the table below.

The left-hand column shows the status quo: x86_64 only beats x86 in mutator time, and that is a shallow victory as the higher GC time means that total runtime is worse for x86_64.

The right-hand column shows what the situation would be if we switch to dynamic instead. Allocations, memory use etc remain higher due to all word-sized things being twice as big. However, the combination of x86_64's performance improving, and x86's performance getting worse, means that x86_64 is now faster overall.

{{{
#!html
<table border="1">
<tr><td></td><th style="font-weight: bold;">x86 -> x86_64<br />when static by default</th><th style="font-weight: bold;">x86 -> x86_64<br />when dynamic by default</th></tr>

<tr><td colspan="3" style="font-weight: bold;">Binary Sizes</td></tr>
<tr><td>-1 s.d.</td><td>+38.0%</td><td>+7.4%</td></tr>
<tr><td>+1 s.d.</td><td>+38.6%</td><td>+30.6%</td></tr>
<tr><td>Average</td><td style="color: red">+38.3%</td><td style="color: red">+18.5%</td></tr>

<tr><td colspan="3" style="font-weight: bold;">Allocations</td></tr>
<tr><td>-1 s.d.</td><td>+63.2%</td><td>+63.2%</td></tr>
<tr><td>+1 s.d.</td><td>+114.4%</td><td>+114.4%</td></tr>
<tr><td>Average</td><td style="color: red">+87.0%</td><td style="color: red">+87.0%</td></tr>

<tr><td colspan="3" style="font-weight: bold;">Run Time</td></tr>
<tr><td>-1 s.d.</td><td>-23.5%</td><td>-31.6%</td></tr>
<tr><td>+1 s.d.</td><td>+36.1%</td><td>+14.7%</td></tr>
<tr><td>Average</td><td style="color: red">+2.1%</td><td style="color: green">-11.4%</td></tr>

<tr><td colspan="3" style="font-weight: bold;">Elapsed Time</td></tr>
<tr><td>-1 s.d.</td><td>-18.2%</td><td>-30.0%</td></tr>
<tr><td>+1 s.d.</td><td>+40.1%</td><td>+17.0%</td></tr>
<tr><td>Average</td><td style="color: red">+7.0%</td><td style="color: green">-9.5%</td></tr>

<tr><td colspan="3" style="font-weight: bold;">Mutator Time</td></tr>
<tr><td>-1 s.d.</td><td>-32.4%</td><td>-38.8%</td></tr>
<tr><td>+1 s.d.</td><td>+20.1%</td><td>+3.0%</td></tr>
<tr><td>Average</td><td style="color: green">-9.9%</td><td style="color: green">-20.6%</td></tr>

<tr><td colspan="3" style="font-weight: bold;">Mutator Elapsed Time</td></tr>
<tr><td>-1 s.d.</td><td>-28.7%</td><td>-37.9%</td></tr>
<tr><td>+1 s.d.</td><td>+22.5%</td><td>+4.4%</td></tr>
<tr><td>Average</td><td style="color: green">-6.6%</td><td style="color: green">-19.5%</td></tr>

<tr><td colspan="3" style="font-weight: bold;">GC Time</td></tr>
<tr><td>-1 s.d.</td><td>+4.5%</td><td>-11.9%</td></tr>
<tr><td>+1 s.d.</td><td>+74.8%</td><td>+54.1%</td></tr>
<tr><td>Average</td><td style="color: red">+35.2%</td><td style="color: red">+16.5%</td></tr>

<tr><td colspan="3" style="font-weight: bold;">GC Elapsed Time</td></tr>
<tr><td>-1 s.d.</td><td>+7.9%</td><td>-8.0%</td></tr>
<tr><td>+1 s.d.</td><td>+75.1%</td><td>+56.7%</td></tr>
<tr><td>Average</td><td style="color: red">+37.4%</td><td style="color: red">+20.0%</td></tr>

<tr><td colspan="3" style="font-weight: bold;">Total Memory in use</td></tr>
<tr><td>-1 s.d.</td><td>-1.7%</td><td>-1.9%</td></tr>
<tr><td>+1 s.d.</td><td>+88.9%</td><td>+88.9%</td></tr>
<tr><td>Average</td><td style="color: red">+36.3%</td><td style="color: red">+36.1%</td></tr>

<tr><td colspan="3" style="font-weight: bold;">Compile Times</td></tr>
<tr><td>-1 s.d.</td><td>+11.9%</td><td>-8.9%</td></tr>
<tr><td>+1 s.d.</td><td>+21.1%</td><td>+2.9%</td></tr>
<tr><td>Average</td><td style="color: red">+16.4%</td><td style="color: green">-3.1%</td></tr>
</table>
}}}
