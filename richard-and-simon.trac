= Summary of tasks to be completed

... as discussed by Richard and Simon. This page is mostly for our own notes, but others are welcome to read it.

* Implement homogeneous as per Stephanie's paper
* Fix #11715 according to Richard's plan
* Change flattener to be homogeneous (#12919)
* Remove `solveSomeEqualities`
* Generalized injectivity #10832, vis-a-vis Constrained Type Families paper
* #13333 (Typeable regression)
* Taking better advantage of levity polymorphism:
  * Could `[]` be a data family?
  * Unlifted newtypes
  * Unlifted datatypes
  * generalized classes in base
  * ...
* #11739 (simplify axioms)
* Fix all the `TypeInType` bugs
* Clean up pure unifier to make the fact that kind coercions ''only'' affect type variables by using, e.g., `getCastedTyVar_maybe`.
* Is it possible to remove all the pushing in `mkCastTy`? I think so. The pushing doesn't help `splitTyConApp` at all, because pushing a coercion into a `TyConApp` doesn't make it become another `TyConApp`. The pushing ''does'' help `splitAppTy`, but perhaps all usages of `splitAppTy` already account for casts. ''Dangling problem:'' what on earth to do about `LRCo`, given that it's not always possible to push? It seems that it may be impossible to make `LRCo` work in a way that respects `eqType` equality, with `eqType`'s ability to move casts about willy-nilly.

**Iceland_jack**: By `[]` as a data family do you mean:

{{{#!hs
data family [] (a :: TYPE (rep :: RuntimeRep)) :: Type

data instance [] (a :: Type)        = []   | a : [a]
data instance [] (a :: TYPE IntRep) = INil | ICons a [a]
...
}}}

I invite you to look at [https://gist.github.com/Icelandjack/1824f4544c86b4ab497282783f94c360 this gist] posted on #12369 and #13341.