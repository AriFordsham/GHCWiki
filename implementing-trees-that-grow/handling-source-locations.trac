= Handling of Source Locations in Trees that Grow =

== Problem ==

The current design of [https://ghc.haskell.org/trac/ghc/wiki/ImplementingTreesThatGrow/TreesThatGrowGuidance TTG HsSyn AST] in GHC stores source locations for terms of a datatype `Exp` in a separate wrapper datatype `LExp` which is mutually recursive with `Exp` such that every recursive reference to `Exp` is done **indirectly**, via a reference to the wrapper datatype `LExp` (see the example code below). We refer to this style of storing source locations as the ping-pong style.

Besides the indirection and the resulting complications of the ping-pong style, there are two key problems with it: 

a. It bakes-in the source locations in the base TTG AST, forcing all instances to store source locations, even if they don't need them.
   For example, TH AST does not carry source locations. 

b. It results in a form of conceptual redundancy: source locations are tree decorations and they belong in the extension points.
   (see [https://ghc.haskell.org/trac/ghc/wiki/ImplementingTreesThatGrow/TreesThatGrowGuidance TTG Guidance])

== Solutions ==

The key solution is to move source locations to the extension points, remove the indirection (e.g., the wrapper datatype `LExp`) altogether, and update the related code (e.g., functions over `Exp`) accordingly. 

We assume that open extension typefamily instances for GHC-specific decorations are nested, such that they call a closed typefamily to choose the extension based on the index (e.g., see `XApp` calling `XAppGHC` in the code below).
 
There are a couple of ways to implement such a solution:

A. We put the source locations in the new constructor extension, similar in spirit to the current `Located`.
B. We put the source locations in the new field extensions and use a typeclass to set/get the locations.

In the implementation, we have settled on the solution A, as it avoids the clutter. 

Notes:
* The API Annotations are similar to the `SrcSpan`, in that they are additional decorations, and also currently appear wherever there is a `SrcSpan`.
  The API Annotations can be accommodated via a straightforward extension of the type class approach, by defining
  {{{#!hs
 		data Extra = Extra SrcSpan [(SrcSpan,AnnKeywordId)]
 		
 		class HasExtra a where
 		  getSpan :: a -> SrcSpan
 		  setSpan :: a -> SrcSpan -> a
 		
 		  getApiAnns :: a -> [(SrcSpan,AnnKeywordId)]
 		  setApiAnns :: a -> [(SrcSpan,AnnKeywordId)] -> a
  }}}

* We also currently have sections of AST without source locations, such as those generated when converting TH AST to hsSyn AST, or for GHC derived code.

   We can perhaps deal with these by either defining an additional pass, so

   {{{#!hs
   data Pass = Parsed | Renamed | Typechecked | Generated
      deriving (Data)
   }}}

   or by making the extra information status dependent on an additional parameter, so

   {{{#!hs
   data GhcPass (l :: Location) (c :: Pass)
   deriving instance Eq (GhcPass c)
   deriving instance (Typeable l,Typeable c) => Data (GhcPass l c)

   data Pass = Parsed | Renamed | Typechecked
     deriving (Data)

   data Location = Located | UnLocated
   }}}

   Thanks to Zubin Duggal for bringing the unlocated problem up on IRC.

* The setter/getter functions can be generalised to set/get anything:
  {{{#!hs
  class Has b a where
    get :: a -> b
    set :: a -> b -> a
   }}}

== An example to illustrate ==

To explain the design choices, we use a simple language of expressions.
Here are the base definitions in [wiki:ImplementingTreesThatGrow/TreesThatGrowGuidance TTG style]:
{{{#!hs
{-# OPTIONS_GHC -Wall #-}
{-# LANGUAGE TypeFamilies #-}
module TTG where

-- ----------------------------------------------
-- AST Base
-- ----------------------------------------------
data Exp x
  = Var (XVar x) (XId x)
  | Abs (XAbs x) (XId x) (Exp x)
  | App (XApp x) (Exp x) (Exp x)
  | Par (XPar x) (Exp x)
  | New (XNew x) -- The extension constructor

type family XVar x
type family XAbs x
type family XApp x
type family XPar x
type family XNew x
type family XId  x
}}}

with some basic GHC-specific types defined as

{{{#!hs
{-# OPTIONS_GHC -Wall -fno-warn-unticked-promoted-constructors #-}
{-# LANGUAGE TypeFamilies , DataKinds #-}
module BasicGHCTypes where

import Data.Void

-- ----------------------------------------------
-- GHC-Specific Declarations
-- ----------------------------------------------
data Phase = Ps | Rn | Tc
data GHC (p :: Phase)

data RdrName    -- = the definition of RdrName
data Name       -- = the definition of Name
data Id         -- = the definition of Id
data SrcSpan    -- = the definition of SrcSpan
data Type       -- = the definition of SrcSpan
data UnboundVar -- = the definition of UnboundVar

data Located a = L SrcSpan a

getLoc :: Located a -> SrcSpan
getLoc (L sp _)    = sp

setLoc :: Located a -> SrcSpan -> Located a
setLoc (L _ x) sp' = L sp' x

noLoc :: SrcSpan
noLoc = undefined -- or be an empty SrcSpan

type family XAppGHC (p :: Phase) where
  XAppGHC Ps = ()
  XAppGHC Rn = ()
  XAppGHC Tc = Type

type family XNewGHC (p :: Phase) where
  XNewGHC Ps = Void
  XNewGHC _  = UnboundVar

type family XIdGHC (p :: Phase) where
  XIdGHC Ps = RdrName
  XIdGHC Rn = Name
  XIdGHC Tc = Id
}}}

Notice that the payload of the `Var` constructor is of type `XId x`. For
GHC, `x` will be instantiated to `GHC p`, and `XId` has a `type instance` that
delegates to `XIdGHC p`.  The latter can be defined by a nice ''closed'' type
family.

=== Ping-pong style ===

Here is a representation of lambda expressions in the ping-pong style.
Unfortunately, this forces us to redefine the base TTG data type,
forcing it into ping-pong style, which is why we don't like it for the reasons mentioned above.

{{{#!hs
{-# OPTIONS_GHC -Wall #-}
{-# LANGUAGE TypeFamilies #-}
module Original where

import BasicGHCTypes

-- ----------------------------------------------
-- AST Base
-- ----------------------------------------------
type LExp x = Located (Exp x)

data Exp x -- Notice the alternation between LExp and Exp
  = Var (XVar x) (XId x)
  | Abs (XAbs x) (XId x)  (LExp x)
  | App (XApp x) (LExp x) (LExp x)
  | Par (XPar x) (LExp x)
  | New (XNew x) -- The extension constructor

type family XVar x
type family XAbs x
type family XApp x
type family XPar x
type family XNew x
type family XId  x

-- ----------------------------------------------
-- GHC-Specific Decorations
-- ----------------------------------------------
type instance XVar (GHC _) = ()
type instance XAbs (GHC _) = ()
type instance XApp (GHC p) = XAppGHC p
type instance XPar (GHC _) = ()
type instance XNew (GHC p) = XNewGHC p
type instance XId  (GHC p) = XIdGHC  p

-- ----------------------------------------------
-- Example Function
-- ----------------------------------------------
par :: LExp (GHC x) -> LExp (GHC x)
par l@(L sp (App{})) = L sp (Par () l)
par l                = l
}}}

=== Solution A - Example Code ===
In the code below, as compared to the ping-pong style above, we have the following key changes:

* `LExp` is replaced with `Exp`
* a new constructor extension is introduced to wrap `Exp` with a `SrcSpan` 
* a pattern synonym `LL` is introduced using the new constructor

{{{#!hs
{-# OPTIONS_GHC -Wall #-}
{-# LANGUAGE TypeFamilies, PatternSynonyms #-}
module SolutionB where

import BasicGHCTypes
import TTG

-- ----------------------------------------------
-- GHC-Specific Decorations
-- ----------------------------------------------
type instance XVar (GHC _) = ()
type instance XAbs (GHC _) = ()
type instance XApp (GHC p) = XAppGHC p
type instance XPar (GHC _) = ()
type instance XNew (GHC p) = Either (Located (Exp (GHC p))) (XNewGHC p)
type instance XId  (GHC p) = XIdGHC  p

-- NB: if GHC later wants to add extension fields to (say)
-- XAbs, we can just redefine XAbs (GHC p) to be more like
-- the XApp case

-- ----------------------------------------------
-- LL Pattern Synonym
-- ----------------------------------------------
pattern LL :: SrcSpan -> Exp (GHC p) -> Exp (GHC p)
pattern LL sp m = New (Left (L sp m))

-- ----------------------------------------------
-- Example Function
-- ----------------------------------------------
par :: Exp (GHC p) -> Exp (GHC p)
par l@(LL sp (App{})) = LL sp (Par () l)
par l                 = l
}}}

=== Solution B - Example Code ===

In the code below, as compared to the ping-pong style above, we have the following key changes:

* `LExp` is replaced with `Exp`
* field extensions are set to have a `SrcSpan` paired (via `Located`)
  with a closed type family specialised for GHC phases
* a setter/getter function pair is introduced by a typeclass
* a pattern synonym `LL` is introduced using the setter/getter function pair

{{{#!hs
{-# OPTIONS_GHC -Wall #-}
{-# LANGUAGE TypeFamilies, PatternSynonyms, ViewPatterns, FlexibleInstances #-}
module SolutionA where

import Data.Void
import BasicGHCTypes
import TTG

-- ----------------------------------------------
-- GHC-Specific Decorations
-- ----------------------------------------------
type instance XVar (GHC p) = Located ()
type instance XAbs (GHC p) = Located ()
type instance XApp (GHC p) = Located (XAppGHC p)
type instance XPar (GHC p) = Located ()
type instance XNew (GHC p) = Located (XNewGHC p)
type instance XId  (GHC p) = XIdGHC  p

-- NB: if GHC later wants to add extension fields to (say)
-- XAbs, we can just redefine XAbs (GHC p) to be more like
-- the XApp case

-- ----------------------------------------------
-- HasSpan Typeclass and LL Pattern Synonym
-- ----------------------------------------------
class HasSpan a where
  getSpan :: a -> SrcSpan
  setSpan :: a -> SrcSpan -> a

instance HasSpan SrcSpan where
  getSpan   = id
  setSpan _ = id

instance HasSpan Void where
  getSpan x   = absurd x
  setSpan x _ = absurd x

instance HasSpan (Located a) where
  getSpan = getLoc
  setSpan = setLoc

instance HasSpan (Exp (GHC p)) where
{- or,
type ForallX (p :: * -> Constraint) x
  = ( p (XVar x) , p (XAbs x) , p (XApp x) , p (XPar x)
    , p (XNew x) )

instance ForallX HasSpan x => HasSpan (Exp x) where
-}
  getSpan (Var ex _)      = getSpan ex
  getSpan (Abs ex _ _)    = getSpan ex
  getSpan (App ex _ _)    = getSpan ex
  getSpan (Par ex _)      = getSpan ex
  getSpan (New ex)        = getSpan ex

  setSpan (Var ex x)   sp = Var (setSpan ex sp) x
  setSpan (Abs ex x n) sp = Abs (setSpan ex sp) x n
  setSpan (App ex l m) sp = App (setSpan ex sp) l m
  setSpan (Par ex m)   sp = Par (setSpan ex sp) m
  setSpan (New ex)     sp = New (setSpan ex sp)

getSpan' :: HasSpan a => a -> Located a
getSpan' m = L (getSpan m) m

pattern LL :: HasSpan a => SrcSpan -> a -> a
pattern LL s m <- (getSpan' -> L s m)
  where
        LL s m =  setSpan m s

-- ----------------------------------------------
-- Example Function
-- ----------------------------------------------
par :: Exp (GHC p) -> Exp (GHC p)
par l@(LL sp (App{})) = LL sp (Par (L noLoc ()) l)
par l                 = l
}}}

== Pros & Cons ==

=== Solution A ===
Pros:
* It makes it easy to omit locations altogether (see the notes about "Generated" code).
  This is a Good Thing.
* It makes it easy to store fewer locations (e.g. one location for `(f x y z)`, 
  rather than one for `(f x y z)`, one for `(f x y)`, and one for `(f x)`).
* It's easy to add the current location to the monad
     `f (XNew loc e) = setLoc loc $ f e`
  Simple, elegant!
Cons:
* At the binding site of a variable we know that we *always* have a location, and we can put that in its Name.  
  If locations were more optional, that would not be so true.

=== Solution B ===
Pros:
* TODO 
Cons:
* An instance of `HasSpan` should be defined per datatype
* Handling of the source locations should be done once per constructor
* When constructing/generating terms the first field of the constructors should explicitly mention the source location
  (see the `par` function in the Solution A's code, where the first field of `Par` should have a `SrcSpan`, even though a dummy one.)
