[[PageOutline]]

== Nofib results ==

Full results [https://gist.githubusercontent.com/thoughtpolice/498d51153240cc4d899c/raw/9a43f6bbfd642cf4e7b15188f9c0b053d311f7b9/gistfile1.txt are here] (updated '''May 5th, 2015''')

'''NB''': The baseline here is 7.6.3



=== Nofib outliers ===

==== Binary sizes ====

===== 7.6 to 7.8 =====

  - Solid average binary size increase of '''5.3%'''.

==== Allocations ====

===== 7.6 to 7.8 =====

  - '''spectral-norm''': increases by '''17.0%'''.
    - A '''lot''' more calls to `map`, over 100 more! Maybe inliner failure?
    - Over '''twice''' as many calls to `ghc-prim:GHC.Classes.$fEqChar_$c=={v r90O}` (& similar functions). Also over twice as many calls to `elem`, 
    - Similarly, many more calls to other specializations, like `base:Text.ParserCombinators.ReadP.$fMonadPlusP_$cmplus{v r1sr}`, which adds even more allocations (from 301 to 3928 for this one entry!)
    - Basically the same story up to `HEAD`!

===== 7.8 to 7.10 =====

  - '''gcd''': increases by '''20.7%'''.
    - Ticky tells us that this seems to be a combination of a few things; most everything seems fairly similar, but we see a large amount of allocations attributable to 7.10 that I can't figure out where they came from, aside from the new `integer-gmp`: `integer-gmp-1.0.0.0:GHC.Integer.Type.$WS#{v rwl}` accounts for 106696208 extra bytes of allocation! It also seems like there are actual extant calls to `GHC.Base.map` in 7.10, and none in 7.8. These are the main differences.
  - '''pidigits''': increases by '''7.4%'''.
    - Ticky tells us that this seems to be, in large part, due to `integer-gmp` (which is mostly what it benchmarks anyway). I think part of this is actually an error, because before integer-gmp, a lot of things were done in C-- code or whatnot, while the new `integer-gmp` does everything in Haskell, so a lot more Haskell code shows up in the profile. So the results aren't 1-to-1. One thing that seems to be happening is that there are a lot more specializations going on that are called repeatedly, it seems; many occurrences of things like `sat_sad2{v} (integer-gmp-1.0.0.0:GHC.Integer.Type) in rfK` which don't exist in the 7.8 profiles, each with a lot of entries and allocations.
  - '''primetest''': went down '''27.5%''' in 7.6-to-7.8, but '''8.8%''' slower than 7.6 now - in total it got something like '''36.6%''' worse.
    - Much like '''pidigits''', a lot more `integer-gmp` stuff shows up in these profiles. While it's still just like the last one, there are some other regressions; for example, `GHC.Integer.Type.remInteger` seems to have 245901/260800 calls/bytes allocated, vs 121001/200000 for 7.8

TODO: Build 7.10 with `integer-gmp 0.5` (not "`integer-gmp2`") to compare allocation baselines - did the compiler or the rewrite cause these failures?

TODO: Lots of fusion changes have happened in the last few months too - but these should all be pretty diagnosable with some reverts, since they're usually very localized. Maybe worth looking through `base` changes.

==== Runtime ====

===== 7.6 to 7.8 =====

  - `lcss`: increases by '''12.6%'''.
    - Ticky says it seems to be `map` calls yet again! These jump hugely here from 21014 to 81002.
    - Also, another inner loop with `algb` it looks like gets called a huge number of times too - `algb2` is called '''2001056 times vs 7984760 times'''!
      - Same with `algb` and `algb1`, which seem to be called more often too.
    - Some other similar things; a few regressions in the # of calls to things like `Text.ParserCombinator.ReadP` specializations, I think.
    - Same story with HEAD!

===== 7.8 to 7.10 =====

  - `lcss`: decreased by ~5% in 7.10, but still '''7%''' slower than 7.6.
    - See above for real regressions.
  - `multiplier`: increases by '''7.6%'''.
    - `map` strikes again? 2601324 vs 3597333 calls, with an accompanying allocation delta.

== tests/perf/compiler` results ==

=== 7.6 vs 7.8 ===

  - A bit difficult to decipher, since a lot of the stats/surrounding numbers were totally rewritten due to some Testsuite API overhauls.
  - The results are a mix; there are things like `peak_megabytes_allocated` being bumped up a lot, but a lot of them also had `bytes_allocated` go down as well. This one seems pretty mixed.
  
=== 7.8 vs 7.10 ===

  - Things mostly got **better** according to these, not worse!
  - Many of them had drops in `bytes_allocated`, for example, `T4801`.
  - The average improvement range is something like 1-3%.
  - But one got much worse; `T5837`'s `bytes_allocated` jumped from 45520936 to 115905208, 2.5x worse!

=== 7.10 vs HEAD ===

  - Most results actually got **better**, not worse!
  - Silent superclasses made HEAD drop in several places, some noticeably over 2x
    - `max_bytes_used` increased in some cases, but not much, probably GC wibbles.
  - No major regressions, mostly wibbles.

== Build times ==

(NB: Sporadically updated)

'''As of April 22nd''':

  - GHC HEAD: 14m9s  (via 7.8.3) (because of Joachim's call-arity improvements)
  - GHC 7.10: 15m43s (via 7.8.3)
  - GHC 7.8:  12m54s (via 7.8.3)
  - GHC 7.6:  8m19s  (via 7.4.1)

Random note: GHC 7.10's build system actually disabled DPH (half a dozen more packages and probably a hundred extra modules), yet things *still* got slower over time!
