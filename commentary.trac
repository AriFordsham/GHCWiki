= The GHC Commentary =

This tree of wiki pages is a "commentary" on the GHC source code.  It contains all the explanatory material that doesn't belong in comments in the source code itself, because the material is wide-ranging, usually covers multiple source files, and is more architectural in nature.  The commentary can also be considered a design document for GHC.

Please feel free to add material to this commentary: don't worry too much about accuracy, in due course someone will edit your contribution.  Try to link to source files as much as possible by using this macro: {{{[[GhcFile(compiler/Makefile)]]}}} (the usual Trac {{{source:}}} macro doesn't work here because the GHC darcs repository isn't integrated into this Trac).  Also try to add appropriate links to other parts of the commentary.


== Contents ==

 * [wiki:Commentary/SourceTree Source Tree Roadmap]
 * [wiki:WorkingConventions Coding style guidelines]
 * [wiki:Commentary/Pipeline The compilation pipeline]

 * [wiki:Commentary/Compiler The Compiler]
  
 * [wiki:Commentary/Rts The Runtime System]
   In addition to the usual runtime support contains information on:
    * [wiki:Commentary/Rts/HaskellExecution The Haskell Execution Model]
    * [wiki:Commentary/Rts/Storage The memory layout of heap and stack objects]
 
 * Cross-cutting concerns: topics which span both the compiler and the runtime system
    * [wiki:Commentary/Profiling Profiling]
    * [wiki:Commentary/PrimOps Primitive Operations (PrimOps)]; see also [wiki:Commentary/Compiler/WiredIn Wired-in and known-key things]
    * Shared Libraries
      * [wiki:Commentary/PositionIndependentCode Position Independent Code and Dynamic Linking]
      * [wiki:DynamicLinking]: Support for dynamic linking on various platforms, and what the flags do
      * [wiki:SharedLibraries]: Distribution and build system issues for shared libraries

 * [wiki:Commentary/UserManual The User Manual] (formatting guidelines etc)

 * [wiki:Commentary/EvilMangler The Evil Mangler]

 * Working on GHC
    * DebuggingGhcCrashes: how to use gdb to debug a crash in GHC-compiled code.

== Contributed Documentation ==

Please feel free to add new pages here.  In due course information will migrate from here to the main commentary above.

 * The Compiler
   * [wiki:Commentary/Compiler/NewCodeGen Notes about the new code generator]
   * [wiki:TypeFunctions Type families/type functions]: Notes concerning the implementation of type families, associated types, and equality constraints as well as the extension of the type checker with a contraint solver for equality constraints.
   * [wiki:IntermediateTypes]: Notes about the type system of GHC's new intermediate language (in the HEAD since ICFP'06)
   * [wiki:DataParallel]: Notes about the implementation of Data Parallel Haskell
   * [wiki:RewriteRules]: Notes about the implementation of RULEs in GHC
   * [wiki:BackEndNotes]: Some ideas and notes about the back end.
   * [wiki:Commentary/CmmExceptions Cmm: Implementing Exception Handling]: Implementing exception handling for primitive operations in Cmm
   * [wiki:GhciDebugger]: Some notes about the implementation of the GHCi debugger. Probably uninteresting unless you want to work on the debugger.
   * [wiki:NewGhciDebugger]: The new GHCi debugger.
   * AddingNewPrimitiveOperations: How to add new primitive operations to GHC Haskell.
   * [wiki:ReplacingGMPNotes Replacing GMP]: Notes from an effort to replace GMP with another Bignum library.
   * [wiki:ExternalCore]: Describes the process of bringing External Core up to speed. Once finished, this will simply describe what External Core is, and how it works. 
   * [wiki:HaddockComments]: Some notes about how the Haddock comment support is implemented.
   * [wiki:ExplicitCallStack]: Notes about maintaining an explicit call stack, to support error attribution and profiling.
   * [wiki:SQLLikeComprehensions SQL-Like Comprehensions]: Notes on the ongoing implementation of SPJs "Comprehensive Comprehensions".

 * The Runtime System
   * [wiki:GarbageCollectorNotes] Notes about GHC's existing single threaded garbage collector and development of a parallel GC.
   * [wiki:GMPMemoryManagement] Describes how the garbage collector cooperates with GMP for Integer.
   * [wiki:SemiTagging]: Describes how the semi-tagging optimisation will be implemented.
   * [wiki:PAPI]: Measurement of program performance usign CPU events (cache misses, branch mispredictions).

 * Other Cross-cutting concerns: topics which span both the compiler and the runtime system
    * How the [wiki:Commentary/Hpc Haskell Program Coverage] option works

 * Getting to grips with the code base
   * BeginnersNotes: Some notes about getting started hacking GHC and the structure of the compiler (especially types and typecheck)

 * [wiki:AboutVideos Hackathon presentations] (video)

 
== Old but useful ==

Finally, here are some generally-useful, but now somewhat-out-of-date resources:
 * [http://www.cse.unsw.edu.au/~chak/haskell/ghc/comm/ The old GHC Commentary]: Information on the internals of GHC, in various states of up-to-dateness.  We are keen to move this stuff out of its current location and onto this Wiki.  If anyone is willing to help do that, even for just a part in which you are interested, we would be delighted.
 * GhcPapers: papers and pointers to other documents that relate to the inner workings of GHC.


Convert type diagram to SVG? Upload graphviz source?