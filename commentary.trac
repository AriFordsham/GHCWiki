= The GHC Commentary =

This tree of wiki pages is a "commentary" on the GHC source code.  It contains all the explanatory material that doesn't belong in comments in the source code itself, because the material is wide-ranging, usually covers multiple source files, and is more architectural in nature.  The commentary can also be considered a design document for GHC.

For the dedicated, there are [wiki:AboutVideos videos of Simon and Simon giving an overview of GHC], at the 2006 [wiki:Hackathon GHC Hackathon].

== Editing the Commentary ==

Please feel free to add material to the rest of the wiki: don't worry too much about accuracy (in due course someone will edit your contribution). When unsure though please indicate this and its best to ask on the GHC mailing list so you can correct the commentary. Please give some thought to where in the commentary your contribution belongs. GHC has an older commentary (non wiki based) that read like a single coherent narrative, made sure to define terms before using them, and introduced concepts in the order which made them easiest to understand.  Please do try to preserve those properties in this wiki commentary. If you're unsure or in a hurry, consider creating a wiki page outside the commentary and linking to it from the commentary (or the "contributed documentation" section below).

Try to link to source files as much as possible by using this macro: {{{[[GhcFile(compiler/Makefile)]]}}}. Also try to add appropriate links to other parts of the commentary.

== Contents ==

 * [wiki:Commentary/GettingStarted Getting Started]
   * [wiki:Commentary/SourceTree Source Tree Roadmap]
   * [wiki:Commentary/ModuleStructure Module Structure]
   * [wiki:Commentary/CodingStyle Coding Style]
   * [wiki:Commentary/Abbreviations Abbreviations in GHC]
   * [wiki:Commentary/PlatformNaming Platforms and their Naming Convention]

 * [wiki:Commentary/Compiler The Compiler]

 * [wiki:Commentary/Libraries The Libraries on which GHC depends]
   * [wiki:Commentary/Libraries/Integer The Integer libraries (`integer-gmp` and `integer-simple`)]

 * [wiki:Commentary/Rts The Runtime System (RTS)]
    * [wiki:Commentary/Rts/Conventions RTS Coding Conventions]
    * [wiki:Commentary/Rts/HaskellExecution The Haskell Execution Model]
    * [wiki:Commentary/Rts/Storage The memory layout of heap and stack objects]
 
 * Cross-cutting concerns: topics which span both the compiler and the runtime system
    * [wiki:Commentary/Profiling Profiling]
    * [wiki:Commentary/Compiler/WiredIn Wired-in and known-key things]
    * [wiki:Commentary/PrimOps Primitive Operations (PrimOps)]
    * [wiki:Commentary/Packages The Package System]
 
 * [wiki:Commentary/UserManual The User Manual] (formatting guidelines etc)

== Contributed Documentation ==

The above commentary covers the source code of GHC. For material that doesn't concern this topic (such as proposals, work-in-progress and status reports) or that don't fit into the existing structure, you will find them below. Feel free to add new material here but please categorise it correctly.

 * General Notes on the GHC compiler
   * Edward Yang's blog post about [http://blog.ezyang.com/2011/04/tracing-the-compilation-of-hello-factorial/ the entire complilation pipeline for `factorial`]
   * [wiki:AddingNewPrimitiveOperations New Prim Ops]: How to add new primitive operations to GHC Haskell.
   * [wiki:ReplacingGMPNotes Replacing GMP]: Notes from an effort to replace GMP with another Bignum library.
   * [wiki:ExternalCore External Core]: Describes the process of bringing External Core up to speed. Once finished, this will simply describe what External Core is, and how it works. 
   * [http://sourceforge.net/apps/mediawiki/developers/index.php?title=ScrapYourBoilerplate The Scrap your boilerplate homepage].
   * [wiki:Commentary/Compiler/OptOrdering Optimisation Ordering] Describe the ordering and interaction of optimisation passes (Old).

 * Notes on implemented GHC features:
   * [wiki:GhcKinds Kind polymorphism and data type promotion]
   * [wiki:KindFact A kind for class constraints. Implemented as ConstraintKinds]
   * [wiki:Commentary/Compiler/Backends/LLVM LLVM back end]
   * [wiki:Commentary/Compiler/GenericDeriving Support for generic programming]
   * [wiki:Commentary/Compiler/TemplateHaskell Notes about Template Haskell]
   * [wiki:RewriteRules Rewrite Rules]: Notes about the implementation of RULEs in GHC
   * [wiki:MonadComprehensions Monad Comprehensions]: Translation rules and some implementation details 
   * [wiki:HaddockComments Haddock]: Some notes about how the Haddock comment support is implemented.  
   * [wiki:IntermediateTypes Intermediate Types]: Notes about the type system of GHC's new intermediate language (in the HEAD since ICFP'06)  
   * [wiki:TypeFunctions Type families/type functions]: Notes concerning the implementation of type families, associated types, and equality constraints as well as the extension of the type checker with a contraint solver for equality constraints.
   * [wiki:Commentary/Compiler/SeqMagic Magic to do with `seq` and friends]
   * [wiki:NewPlugins Compiler plug-ins]
   * [wiki:MemcpyOptimizations memcpy/memmove/memset optimizations]  
   * [wiki:BackEndNotes Backend Ideas]: Some ideas and notes about the back end.
   * [wiki:Commentary/Compiler/NewCodeGen Notes about the new code generator]
   * [wiki:Commentary/Compiler/HooplPerformance A record of improvements made to the performance of the Hoopl library for dataflow optimisation]
   * [wiki:DataParallel DPH]: Notes about the implementation of Data Parallel Haskell
   * [wiki:SafeHaskell Safe Haskell]: The design of the GHC Safe Haskell extension
   * [wiki:SQLLikeComprehensions SQL-Like Comprehensions]: Notes on SPJs "Comprehensive Comprehensions" (!TransformComprehensions)
   * [wiki:DeferErrorsToRuntime Deferring compilation type errors to runtime (`-fwarn-type-errors`)]
   * [wiki:Commentary/Compiler/Demand Demand analyser] Notes on the meanings, worker-wrapper splitting of demand signatures and relevant components of the compiler

 * Notes on proposed or in progress (but out of tree) GHC compiler features:
   * [wiki:Commentary/Contracts Contracts in Haskell]
   * [wiki:Holes Agda-style holes in terms] which supports writing partial programs.
   * [wiki:Records Records]
   * [wiki:NewAxioms New coercion axioms design]
   * [http://haskell.org/haskellwiki/GHC/CouldAndHPCHaskell Cloud Haskell]
   * [wiki:PackageLanguage A modular package language for Haskell] Scott Kilpatrick and Derek Dreyer are designing a new “package language” for Haskell in the style of the ML module system.
   * [wiki:PatternSynonyms Pattern synonyms]
   * [wiki:TypeNats Type level naturals]
   * [wiki:PolymorphicDynamic Polymorphic Dynamic]: Notes on adding ad-hoc polymorphic dynamic types
   * [wiki:DefaultSuperclassInstances Proposal to allow classes to give default implementations for their superclasses]
   * [wiki:Commentary/CmmExceptions Cmm: Implementing Exception Handling]: Implementing exception handling for primitive operations in Cmm
   * [wiki:Commentary/CmmKinds Cmm: Using Kinds to implement calling conventions]: Pointers to explanations of what a {{{CmmKind}}} is and why you might find one useful.
   * [wiki:SIMD SIMD]: Notes on adding SIMD instructions and primOps to GHC
   * [wiki:ExplicitCallStack Explicit Call Stack]: Notes about maintaining an explicit call stack, to support error attribution and profiling.
   * [wiki:ObjectiveC Objective-C FFI]: Haskell FFI support for Objective-C
   * [wiki:BlockObjects C Blocks]: Haskell FFI support for block objects (closures) in C
   * [wiki:ExplicitTypeApplication Syntax for explicit type application and scoped type variables]
   * [wiki:GhcKinds/KindsWithoutData Syntax for defining kinds that do not arise from datatype promotion]
   * [wiki:LambdasVsPatternMatching Lambda-Case]: Syntax for full (with branching) pattern matching on arguments of lambda abstractions

 * GHCi Debuger
   * [wiki:GhciDebugger GHCi Debugger]: Some notes about the implementation of the GHCi debugger. Probably uninteresting unless you want to work on the debugger.
   * [wiki:NewGhciDebugger New GHCi Debugger]: The new GHCi debugger.

 * The Runtime System
   * [wiki:LightweightConcurrency A new lightweight concurrency substrate for GHC]
   * [wiki:GarbageCollectorNotes Garbage Collector]: Notes about GHC's existing single threaded garbage collector and development of a parallel GC.
   * [wiki:GMPMemoryManagement GMP Memory Managment]: Describes how the garbage collector cooperates with GMP for Integer.
   * [wiki:SemiTagging]: Describes how the semi-tagging optimisation will be implemented.
   * [wiki:PAPI]: Measurement of program performance using CPU events (cache misses, branch mis-predictions).

 * Cross-cutting concerns: topics which span both the compiler and the runtime system
    * [wiki:Commentary/Hpc Haskell Program Coverage]: How HPC works

 * [wiki:GpHEden Parallel Haskell Variants]: All aspects of the GpH and Eden parallel variants of GHC.
 
== Old Documentation ==

Here are some useful, but somewhat-out-of-date resources:
 * [http://darcs.haskell.org/ghc/docs/comm/ The old GHC Commentary]: Information on the internals of GHC, in various states of up-to-dateness.  We are keen to move this stuff out of its current location and onto this Wiki.  If anyone is willing to help do that, even for just a part in which you are interested, we would be delighted.  There is a [wiki:Commentary/MigratingOldCommentary page] which tracks the progress of migrating information from the old commentary to this wiki.
 * [wiki:GhcPapers GHC Papers]: Papers and pointers to other documents that relate to the inner workings of GHC.