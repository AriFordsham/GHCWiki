== 0. Overview (SPJ) ==

 * [wiki:Commentary/Organisation The overall organisation of GHC]
 * [wiki:Commentary/SourceTree Source Tree Roadmap], and [wiki:ModuleDependencies module dependencies]
 * [wiki:Commentary/Pipeline The compilation pipeline]
 * [wiki:Commentary/CodingStyle Coding guidelines]

== 1. Building (SM) ==
 * Getting the code (do a live build...)
 * Setting up the build
 * Building
 * tweaking & recompiling, etc.
 * how libraries/packages are built
 * ghc-inplace vs. installed ghc, how does it run inplace (find its bits)
 * how to "use" the build system and common tasks, pointer to docs
 * using/extending the testsuite

== 2. The Compiler ==

 * Roadmap: [wiki:Commentary/Compiler/HscMain compiling a single module]
 * Key data types:
   * Source-language syntax: [wiki:Commentary/Compiler/HsSynType HsSyn]
   * Names: [wiki:Commentary/Compiler/RdrNameType RdrName and OccName], [wiki:Commentary/Compiler/NameType Name]
   * [wiki:Commentary/Compiler/EntityTypes Entities]: variables, type constructors, data constructors, and classes.
   * Types: Type
   * [wiki:Commentary/Compiler/CoreSynType The core language].
   * Cmm.
 * Passes:
   * [wiki:Commentary/Compiler/Renamer Renamer]
   * Typechecker
   * Desugarer
   * Core->core
 * SPJ ModIface, ModDetails, ModGuts
 * SPJ Core->CorePrep->Stg->Cmm
 * [wiki:Commentary/PrimOps Primitive Operations (PrimOps)]
 * SM GHC API
 * SM HscMain upwards: ModSummary, Finder, upsweep, downsweep,

== 3. Back end (SM) ==

 *  SM execution model STG + eval/apply
 *  SM Cmm->NCG
 *  SM Cmm->BCO  (simple compilation scheme, no primops: GHC.PrimopWrappers)
 *  SM Cmm->C

== 4. [wiki:Commentary/Rts The Runtime System] ==
