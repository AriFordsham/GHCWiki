[[PageOutline]]

= GHC 8.0.x Migration Guide =

This guide summarises the changes you may need to make to your code to migrate from GHC 7.10 to GHC 8.0

----------------------------------
== Compiler changes

=== `-fwarn-pointless-pragmas`

This flag has been removed and replaced by two flags `-fwarn-missed-specialisations` and `-fwarn-all-missed-specialisations`.

--------------------------------
== Library changes

=== `base-4.9.0.0`


==== Normalise `Applicative`/`Monad` instance definitions 

`base-4.9.0.0` continues to generalise functions from `Monad` to `Applicative`. However, in order to avoid performance regressions due to sub-optimally defined `Applicative`/`Monad` instances, it's highly advised to follow the
[[Migration/7.10#GHCsaysNoinstanceforApplicative... | AMP+MRP refactoring guidelines ]] that were already provided in the [[Migration/7.10|GHC 7.10.x Migration Guide]].

A new warning that needs to be enabled via `-fwarn-noncanonical-monad-instances` is available to help detect code which may be at risk.


==== ...
TODO

...

----------------------------------
== Tool changes

=== `hsc2hs` defines an `#alignment` macro

`hsc2hs` now supports the `#alignment` macro, which can be used to calculate the alignment of a struct in bytes. It is common for `.hsc` files to implement `#alignment` manually via a `#let` directive:

{{{#!hs
#let alignment t = "%lu", (unsigned long)offsetof(struct {char x__; t (y__); }, y__)
}}}

This command was incorporated into `hsc2hs` with the release of GHC 8.0. As a result, if you have the above directive in your code, it will now emit a warning when compiled with GHC 8.0:

{{{
Module.hsc:24:0: warning: "hsc_alignment" redefined [enabled by default]
In file included from dist/build/Module_hsc_make.c:1:0:
/path/to/ghc/lib/template-hsc.h:88:0: note: this is the location of the previous definition
 #define hsc_alignment(t...) \
 ^
}}}

To make your code free of warnings on GHC 8.0 and earlier versions, surround the directive with a pragma checking for the right GHC version:

{{{#!hs
#if __GLASGOW_HASKELL__ < 800
#let alignment t = "%lu", (unsigned long)offsetof(struct {char x__; t (y__); }, y__)
#endif
}}}