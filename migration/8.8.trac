[[PageOutline]]

= GHC 8.8.x Migration Guide =

This guide summarises the changes you may need to make to your code to migrate from GHC 8.6 to GHC 8.8. This guide complements the GHC 8.8.x release notes which should be consulted as well.

----------------------------------
== Compiler changes

=== Pattern-match coverage checking changes for strict fields

Consider the following function and data type:

{{{#!hs
data Foo = MkFoo1 Int | MkFoo2 !Void

f :: Foo -> Int
f (MkFoo1 i) = i
}}}

`f` is actually an exhaustive function. Because `MkFoo2` has a strict field of type `Void` (which has no terminating values which inhabit it), it's impossible to construct anything with `MkFoo2` without triggering an infinite loop or throwing an exception. Therefore, one cannot reach the `MkFoo2` case of `f`.

However, previous versions of GHC did not recognize this fact and flagged `f` as being non-exhaustive. As a workaround, one had to explicitly match on `MkFoo2` in `f`:

{{{#!hs
f :: Foo -> Int
f (MkFoo1 i) = i
f (MkFoo2 _) = error "unreachable"
}}}

However, now that GHC is smart enough to recognize that `MkFoo2` is unreachable, it will actually throw a warning (with `-Woverlapping-patterns` enabled) on the above code:

{{{
    Pattern match is redundant
    In an equation for ‘f’: f (MkFoo2 _) = ...
}}}

As a result, some code which compiled without warnings on previous versions of GHC may emit warnings on GHC 8.8.

=== Kind generalization changes for local definitions

Starting in GHC 8.8, we now generalize the kinds in the types of local definitions (e.g., `let`- or `where`-bound functions). As a result, there are a handful of programs which will no longer compile. Here is one such example:

{{{#!hs
type family LetGo :: k

foo :: Proxy (LetGo :: Type)
foo = undefined

sSconcat :: forall (x :: Type). x
sSconcat = undefined
   where sGo :: x -> Proxy LetGo
         sGo _ = foo
}}}

This kind-checks on previous versions of GHC, since the return kind of `LetGo` (in `sGo`) is not generalized, so we have `sGo :: x -> Proxy (LetGo :: Type)` (which is necessary for the body of `sGo` to typecheck). However, this will //not// kind-check on GHC 8.8, since the return kind of `LetGo` //is// generalized, giving us `sGo :: x -> Proxy (LetGo :: k)` (which is too polymorphic for `foo`). Therefore, this code fails on GHC 8.8 with a `Couldn't match type ‘k’ with ‘*’` error.

To avoid this, one can use an explicit kind signature on `LetGo`, like so:

{{{#!hs
  sGo :: x -> Proxy (LetGo :: Type)
  sGo _ = foo
}}}

=== Template Haskell reification change for classes

If you have a type class like this:

{{{#!hs
class C a where
  method :: a
}}}

Then in previous versions of GHC, reifying `C` would give you something like this:

{{{#!hs
class C a where
  method :: forall a. C a => a
}}}

Notice that that `forall a. C a =>` in the type signature for `method` is completely redundant, since that's implied by the fact that it's a class method of `C`. This oversight has been fixed, so reifying `C` will now give you simply `a` as the type signature for `method`.

There may be code in the wild that previously depended on the assumption that reifying a class would put these redundant tyvars/class contexts at the front of each method's type signature, so it's possible that there may be breakage because of this.

=== Additions to the `-Wcompat` warning group

As part of [https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0030-remove-star-kind.rst this GHC proposal], the uses of `*` that rely on the `StarIsType` extension now produce a warning:

{{{
Prelude> type M = (Maybe :: * -> *)

<interactive>:1:20: warning: [-Wstar-is-type (in -Wcompat)]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: use ‘Type’ from ‘Data.Kind’ instead.
}}}

The recommended migration strategy is to follow the suggestion in the warning: import `Type` from the `Data.Kind` module and use it in place of `*`:

{{{
Prelude Data.Kind> type M = (Maybe :: Type -> Type)
}}}

--------------------------------
== Library changes

TODO