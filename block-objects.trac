= FFI Support for C Block Objects =

Apple recently [http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1370.pdf proposed] the inclusion of lambda abstractions (closures) into C/C++/Objective-C and facilitated an implementation in the `clang` compiler framework.  They called this language extension ''blocks'' (or ''block objects'').  It is widely used in the APIs of OS X 10.6 (Snow Leopard) and 10.7 (Lion).  This page is about extending the Haskell 2010 FFI to directly support blocks — i.e., to enable Haskell functions to be marshalled as blocks to C and to enable C blocks to be marshalled as Haskell functions to Haskell land.  This extension will be enabled by the language option `BlockObjects`.

== Example: calling a higher-order C function ==

As an example, consider the library function [http://developer.apple.com/library/mac/#documentation/darwin/reference/manpages/man3/qsort_b.3.html qsort_b]:
{{{
void
qsort_b(void *base, size_t nel, size_t width, int (^compar)(const void *, const void *));
}}}
In C, we might use this function as described in Apple's introduction to block: [http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Blocks/Articles/bxGettingStarted.html#//apple_ref/doc/uid/TP40007502-CH7-SW2 Using a Block Directly].  We would like to be able to do the same in Haskell by writing:
{{{
foreign import ccall qsort_b "stdlib.h" :: Ptr a -> CSize -> CSize -> (Ptr a -> Ptr a -> Int) -> IO ()
}}}

== Background ==

 * [http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html Blocks Programming Topics (Apple)]
 * [http://clang.llvm.org/docs/Block-ABI-Apple.txt Block Implementation Specification (Apple via clang)]
 * [http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1370.pdf N1370: Apple’s Extensions to C]
 * [http://www.friday.com/bbum/2011/03/17/ios-4-3-imp_implementationwithblock/ Dynamic generation of method implementations with blocks]