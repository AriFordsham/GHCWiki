== Splitting base ==

In a [http://www.haskell.org/pipermail/glasgow-haskell-users/2013-February/023764.html thread on glasglow-haskell-users] in February some ideas about splitting base in smaller components were floating around. This wiki page tries to assemble ideas on how to re-group the modules.

The following is a list of all modules in Base, with a suggested re-grouping. Whether this makes sense WRT interdependencies has not yet been verified:

=== Non-Obvious interdependencies ===

This is a list of interdependencies between seemingly unrelated parts that need to be taken into consideration:

 * class Monad mentions `String`, hence pulling Char
 * class Monad mentions `error` and `Data.Int` requires `throw DivideByZero`, hence pulling in exceptions
 * Exceptions pull in `Typeable`
 * `Typeable` pulls in `GHC.Fingerprint`
 * GHC.Fingerprint pulls in `Foreign` and `IO` (but could be replaced by a pure implementation)
 * The Monad instance of `IO` calls `failIO`, which creates an `IOException`, which has fields for handles and devices, and hence pulls in some `Foreign` stuff and some file-related `IO`, preventing the creation of a clean base-io package.
 * The ST Monad can (and should) be provided independently of IO, but currently functions like `unsafeIOToST` are provided in the `Control.Monad.ST` namespace.

=== Other issues ===

 * Some names of base are hardcoded in GHC and hence cannot be moved to a different package name without changes in GHC. This includes:
  * The `Num` constraint on polymorphic literals. Can be avoided by writing `fromIntegral 0` instead of `0`.
  * Similar, the `[x..y]` syntax generates a `base:GHC.Enum.Enum` constraint, `RebindableSyntax` does not help (GHC bug?)
  * `StablePtr`, as used in `GHC.Stable`
  * `Typeable`, `Show` when used in `deriving`. Can probably be avoided by hand-writing instances. `Read` can probably move completely out.
  * `error` has its type wired in GHC when in package base; This is used in a hack in [https://github.com/ghc/packages-base/blob/master/GHC/Err.lhs-boot GHC/Err.hs-boot]. Work-around: Import `GHC.Types` in `GHC/Err.lhs-boot`
  * The `Monad` constraint on do-notation expects the definition to live in base. `RebindableSyntax` helps, but requires to define a local `ifThenElse` function.
  
=== base-pure ===

One package for all standard ADTs (Bool, [], Maybe...) and other pure definitions that are expected to work even with strange targets.

By the list from above, this also needs to have `Char`, Exceptions, `Typeable` and from there much other stuff...

 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Applicative.html Control.Applicative]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Arrow.html Control.Arrow]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Category.html Control.Category]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Bool.html Data.Bool]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Either.html Data.Either]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Eq.html Data.Eq]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Foldable.html Data.Foldable]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Function.html Data.Function]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Functor.html Data.Functor]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Traversable.html Data.Traversable]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Tuple.html Data.Tuple]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-List.html Data.List]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Maybe.html Data.Maybe]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Monoid.html Data.Monoid]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Ord.html Data.Ord]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Ratio.html Data.Ratio]

=== base-io ===

Everything related to IO as we know it.

 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-IORef.html Data.IORef]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-Console.GetOpt.html System.Console.GetOpt]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-CPUTime.html System.CPUTime]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-Environment.html System.Environment]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-Exit.html System.Exit]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-Info.html System.Info]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-IO.html System.IO]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-IO.Error.html System.IO.Error]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-IO.Unsafe.html System.IO.Unsafe]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-Posix.Internals.html System.Posix.Internals]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-Posix.Types.html System.Posix.Types]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-Timeout.html System.Timeout]

=== base-ffi ===

Lots of packages surely do not need anything from the FFI, so put that in a package of its own.

 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign.html Foreign]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-C.html Foreign.C]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-C.Error.html Foreign.C.Error]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-Concurrent.html Foreign.Concurrent]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-C.String.html Foreign.C.String]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-C.Types.html Foreign.C.Types]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-ForeignPtr.html Foreign.ForeignPtr]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-ForeignPtr.Safe.html Foreign.ForeignPtr.Safe]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-ForeignPtr.Unsafe.html Foreign.ForeignPtr.Unsafe]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-Marshal.html Foreign.Marshal]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-Marshal.Alloc.html Foreign.Marshal.Alloc]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-Marshal.Array.html Foreign.Marshal.Array]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-Marshal.Error.html Foreign.Marshal.Error]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-Marshal.Pool.html Foreign.Marshal.Pool]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-Marshal.Safe.html Foreign.Marshal.Safe]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-Marshal.Unsafe.html Foreign.Marshal.Unsafe]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-Marshal.Utils.html Foreign.Marshal.Utils]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-Ptr.html Foreign.Ptr]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-Safe.html Foreign.Safe]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-StablePtr.html Foreign.StablePtr]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Foreign-Storable.html Foreign.Storable]


=== Unsorted ===

 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Concurrent.html Control.Concurrent]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Concurrent.Chan.html Control.Concurrent.Chan]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Concurrent.MVar.html Control.Concurrent.MVar]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Concurrent.QSem.html Control.Concurrent.QSem]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Concurrent.QSemN.html Control.Concurrent.QSemN]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Concurrent.SampleVar.html Control.Concurrent.SampleVar]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Exception.html Control.Exception]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Exception.Base.html Control.Exception.Base]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Monad.html Control.Monad]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Monad.Fix.html Control.Monad.Fix]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Monad.Instances.html Control.Monad.Instances]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Monad.ST.html Control.Monad.ST]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Monad.ST.Lazy.html Control.Monad.ST.Lazy]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Monad.ST.Lazy.Safe.html Control.Monad.ST.Lazy.Safe]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Monad.ST.Lazy.Unsafe.html Control.Monad.ST.Lazy.Unsafe]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Monad.ST.Safe.html Control.Monad.ST.Safe]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Monad.ST.Strict.html Control.Monad.ST.Strict]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Monad.ST.Unsafe.html Control.Monad.ST.Unsafe]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Control-Monad.Zip.html Control.Monad.Zip]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Bits.html Data.Bits]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Char.html Data.Char]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Complex.html Data.Complex]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Data.html Data.Data]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Dynamic.html Data.Dynamic]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Fixed.html Data.Fixed]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-HashTable.html Data.HashTable]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Int.html Data.Int]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Ix.html Data.Ix]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-STRef.html Data.STRef]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-STRef.Lazy.html Data.STRef.Lazy]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-STRef.Strict.html Data.STRef.Strict]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-String.html Data.String]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Typeable.html Data.Typeable]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Typeable.Internal.html Data.Typeable.Internal]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Unique.html Data.Unique]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Version.html Data.Version]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Data-Word.html Data.Word]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Debug-Trace.html Debug.Trace]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Arr.html GHC.Arr]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Base.html GHC.Base]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Char.html GHC.Char]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Conc.html GHC.Conc]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Conc.IO.html GHC.Conc.IO]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Conc.Signal.html GHC.Conc.Signal]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Conc.Sync.html GHC.Conc.Sync]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-ConsoleHandler.html GHC.ConsoleHandler]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Constants.html GHC.Constants]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Desugar.html GHC.Desugar]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Enum.html GHC.Enum]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Environment.html GHC.Environment]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Err.html GHC.Err]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Event.html GHC.Event]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Exception.html GHC.Exception]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Exts.html GHC.Exts]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Fingerprint.html GHC.Fingerprint]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Fingerprint.Type.html GHC.Fingerprint.Type]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Float.html GHC.Float]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Float.ConversionUtils.html GHC.Float.ConversionUtils]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Float.RealFracMethods.html GHC.Float.RealFracMethods]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Foreign.html GHC.Foreign]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-ForeignPtr.html GHC.ForeignPtr]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Generics.html GHC.Generics]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-GHCi.html GHC.GHCi]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Handle.html GHC.Handle]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Int.html GHC.Int]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.html GHC.IO]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IOArray.html GHC.IOArray]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IOBase.html GHC.IOBase]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Buffer.html GHC.IO.Buffer]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.BufferedIO.html GHC.IO.BufferedIO]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Device.html GHC.IO.Device]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Encoding.html GHC.IO.Encoding]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Encoding.CodePage.html GHC.IO.Encoding.CodePage]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Encoding.Failure.html GHC.IO.Encoding.Failure]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Encoding.Iconv.html GHC.IO.Encoding.Iconv]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Encoding.Latin1.html GHC.IO.Encoding.Latin1]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Encoding.Types.html GHC.IO.Encoding.Types]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Encoding.UTF16.html GHC.IO.Encoding.UTF16]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Encoding.UTF32.html GHC.IO.Encoding.UTF32]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Encoding.UTF8.html GHC.IO.Encoding.UTF8]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Exception.html GHC.IO.Exception]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.FD.html GHC.IO.FD]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Handle.html GHC.IO.Handle]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Handle.FD.html GHC.IO.Handle.FD]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Handle.Internals.html GHC.IO.Handle.Internals]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Handle.Text.html GHC.IO.Handle.Text]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.Handle.Types.html GHC.IO.Handle.Types]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IO.IOMode.html GHC.IO.IOMode]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IORef.html GHC.IORef]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-IP.html GHC.IP]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-List.html GHC.List]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-MVar.html GHC.MVar]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Num.html GHC.Num]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Pack.html GHC.Pack]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-PArr.html GHC.PArr]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Ptr.html GHC.Ptr]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Read.html GHC.Read]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Real.html GHC.Real]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Show.html GHC.Show]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-ST.html GHC.ST]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Stable.html GHC.Stable]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Stack.html GHC.Stack]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Stats.html GHC.Stats]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Storable.html GHC.Storable]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-STRef.html GHC.STRef]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-TopHandler.html GHC.TopHandler]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-TypeLits.html GHC.TypeLits]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Unicode.html GHC.Unicode]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Weak.html GHC.Weak]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/GHC-Word.html GHC.Word]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Numeric.html Numeric]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Prelude.html Prelude]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-Mem.html System.Mem]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-Mem.StableName.html System.Mem.StableName]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/System-Mem.Weak.html System.Mem.Weak]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Text-ParserCombinators.ReadP.html Text.ParserCombinators.ReadP]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Text-ParserCombinators.ReadPrec.html Text.ParserCombinators.ReadPrec]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Text-Printf.html Text.Printf]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Text-Read.html Text.Read]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Text-Read.Lex.html Text.Read.Lex]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Text-Show.html Text.Show]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Text-Show.Functions.html Text.Show.Functions]
 * [http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Unsafe-Coerce.html Unsafe.Coerce]
