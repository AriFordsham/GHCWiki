= Concurrent programming in GHC =

This page contains notes and information about how to write concurrent programs in GHC.

Please feel free to add stuff here (login '''guest''', password '''guest''').

== Starting points ==

 * '''Basic concurrency: forkIO and MVars'''.  Read [http://research.microsoft.com/Users/simonpj/papers/marktoberdorf/marktoberdorf.ps.gz Tackling the awkward squad: monadic input/output, concurrency, exceptions, and foreign-language calls in Haskell].
  The [http://www.haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz original paper about Concurrent Haskell] contains quite a few examples about how to write concurrent programs.  A larger example is 
[http://www.haskell.org/~simonmar/papers/web-server.ps.gz Writing High-Performance Server Applications in Haskell, Case Study: A Haskell Web Server]

 * '''Software Transactional Memory''' (STM) is a new way to coordinate concurrent threads. STM will be in GHC 6.6, and is described in the paper [http://research.microsoft.com/~simonpj/papers/stm/index.htm Composable memory transactions].  The paper [http://research.microsoft.com/~simonpj/papers/stm/lock-free.htm Lock-free data structures using Software Transactional Memory in Haskell] gives further examples of concurrent programming using STM.

 * '''Foreign function interface'''.  If you are calling foreign functions in a concurrent program, you need to know about ''bound threads''.  They are described in a Haskell workshop paper, [http://research.microsoft.com/~simonpj/Papers/conc-ffi/index.htm Extending the Haskell Foreign Function Interface with Concurrency].



== Using concurrency in GHC ==

 * You get access to concurrency operations by importing the library [http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Concurrent.html Control.Concurrent].

 * The GHC manual gives a few useful flags that control scheduling (not usually necessary) [http://www.haskell.org/ghc/docs/latest/html/users_guide/sec-using-parallel.html#parallel-rts-opts RTS options].

