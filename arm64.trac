= Building GHC for Android ARM64 =

I have *not* successfully got GHC running on my Arm64 tablet (yet). I've created this page just to document my attempts thus far, since it might help someone in the future. I had no intentions of building for any other target device, so I didn't worry about compatibility with other equipment. My end goal way to make whatever sacrifices were necessary to get a basic frankenGHC running on the tablet, which I would then use to natively compile a proper GHC.

== Target Device ==
Google Pixel C (nVidia Tegra X1, octa-core: four ARM Cortex-A53 and four ARM Cortex-A57, with 3GB ram)

Android 6.0.1 Build MXB48J

Termux version 0.27 (from Google Play)

== Build machine ==
Core2 Duo, with 4GB ram

Gentoo x86-64

Android NDK version 10e

GHC 7.10.3

gcc 4.8.5 (for building x86-64 binaries)

GNU binutils 2.25.1

GNU Make 4.1

GNU libc6 (glibc2) 2.21-r1^s

Perl 5.20.2

GNU Automake 1.15

GNU Autoconf 2.69

llvm 3.7.1

Source tarball of the GHC 8 release candidate. (ghc-8.0.0.20160111)

Source tarball for libiconv version 1.14

== Preparing Toolchain ==

Environment variables (for me, on Gentoo, yours will probably be different):

{{{
# Location of Android NDK installation
export NDK=/opt/android-ndk

# Project directory
export PROJDIR=~/arm

# Standalone toolchain location
export TOOLCHAIN=$PROJDIR/toolchain

# Standalone toolchain system root
export SYSROOT=$TOOLCHAIN/sysroot

# libiconv sub-project directory
export ICONVDIR=$PROJDIR/iconv

# Update path to include the NDK
export PATH=$NDK:$PATH
}}}

Used this command to create a standalone toolchain (reminder: I was specifically targeting my Android 6.0 ARM64 tablet):

{{{
$NDK/build/tools/make-standalone-toolchain.sh \
    --platform=android-21 \
    --install-dir=$TOOLCHAIN \
    --toolchain=aarch64-linux-android-4.9 \
    --system=linux-x86_64
}}}

The Android NDK doesn't have everything we need, so I needed to compile a version of libiconv as well. I used [http://danilogiulianelli.blogspot.com/2012/12/how-to-cross-compile-libiconv-for.html this link] to figure out how to do it.

{{{
cd $ICONVDIR
tar xvzf /path/to/libiconv-1.14.tar.gz
}}}

The copies of `config.sub` and `config.guess` included in this version of libiconv didn't recognize my target architecture, so we had to fix that. I had `=sys-devel/gnuconfig-20150727` (Gentoo package) already installed on my system, but feel free to grab the latest versions from wherever you like.

{{{ 
cp /usr/share/gnuconfig/config.sub $ICONVDIR/libiconv-1.14/build-aux/config.sub
cp /usr/share/gnuconfig/config.guess $ICONVDIR/libiconv-1.14/build-aux/config.guess
cp /usr/share/gnuconfig/config.sub $ICONVDIR/libiconv-1.14/libcharset/lib/localcharset.c
cp /usr/share/gnuconfig/config.guess $ICONVDIR/libiconv-1.14/libcharset/build-aux/config.guess
}}}

I also had to make the edits described in [attachment:localcharset.c.patch]. I can't say whether these changes are appropriate, but they allowed it to compile. Put the patch in `$ICONVDIR`, and then do:

{{{
cd $ICONVDIR/libiconv-1.14
patch -b -p1 -i ../localcharset.c.patch
}}}

Now we create some files that tell Android's build system what to do. I don't really understand these files, I just made some guesses and modified them until they worked. Download both files and put them into `$ICONVDIR`, for now. The first file is [attachment:Android.mk], and the second file is [attachment:Application.mk].

{{{
mkdir $ICONVDIR/jni
mv $ICONVDIR/Android.mk $ICONVDIR/jni/Android.mk
mv $ICONVDIR/Application.mk $ICONVDIR/jni/Application.mk
}}}

Finally it's ready to build!

{{{
cd $ICONVDIR/jni
ndk-build
}}}

Hopefully that worked. I doubt this is the right thing to do, but rather than involving an extra directory in the rest of the build process, I just copied the resulting file over into the sysroot provided by the standalone toolchain:

{{{
cp $ICONVDIR/libs/arm64-v8a/libiconv.so $SYSROOT/usr/lib/libiconv.so
}}}

Now we've got everything we need to build GHC! (or not, because this doesn't actually work)

== Building GHC ==

Start by preparing the environment variables:


{{{
# Project directory
export PROJDIR=~/arm

# Standalone toolchain location
export TOOLCHAIN=$PROJDIR/toolchain

# Standalone toolchain system root
export SYSROOT=$TOOLCHAIN/sysroot

# I had to set these to get the gcc cross-compiling toolchain to find the right libraries.
export CFLAGS=--sysroot=$SYSROOT
export CPPFLAGS=--sysroot=$SYSROOT
}}}

First extract the GHC source tarball:

{{{
cd $PROJDIR
tar xvjf ghc-8.0.0.20160111-src.tar.bz2
}}}

Now we have to apply a bunch of patches to the GHC source.

