This page tracks @akio's attempt at reviving @nomeata's work on [wiki:NestedCPR].

Latest code can be found at https://github.com/takano-akio/ghc/compare/master...nested-cpr .

== Examples

=== simple.hs

This is a simple recursive function with an easy-to-spot nested CPR property.

Status: ok

{{{#!hs
module Foo where
f :: Int -> (Int, Int)
f 0 = (1, 2)
f n
  | even n = f (div n 2)
  | otherwise = case f (n - 1) of
    (a, b) -> (a - 1, b)
}}}

=== strictness.hs

This one is trickier in that the analysis has to use the nested strictness of `foo` on `p` to give `p` a nested CPR property. Inspired by `nofib/imaginary/x2n1`.

Status: ok

{{{#!hs
{-# LANGUAGE BangPatterns #-}
module Foo where

foo :: Int -> (Int, Int) -> (Int, Int)
foo n p
  | even (n + uncurry (+) p), n /= 0 = foo (n - 1) p
  | n == 0 = (1, 2)
  | otherwise = p
}}}

=== strict_field.hs

This one needs a correct handling of strict constructor fields. Inspired by `nofib/imaginary/x2n1`.

Status: ok

{{{#!hs
{-# LANGUAGE BangPatterns #-}
module Foo where
data C a = C !a !a

pow :: C Double -> Int -> C Double
pow !_ 0 = C 0 1
pow !c 1 = c
pow c n
  | even n = let d = pow c (div n 2) in mul d d
  | otherwise = mul c (pow c (n - 1))

mul :: C Double -> C Double -> C Double
mul (C a b) (C d e) = C (a*d-b*e) (a*e+b*d)
}}}

=== strict_field1.hs

This is similar to `strict_field.hs`, but needs a more aggressive worker-wrapper.

Status: not ok. Currently the worker has the type `Double -> Double -> Int# -> (# Double, Double #)`, rather than the desired `Double# -> Double# -> Int# -> (# Double#, Double# #)`.

Changing CPR analysis alone wouldn't help here. We need to give the function a better strictness as well.

{{{#!hs
module Foo (pow) where

data C a = C !a !a

pow :: C Double -> Int -> C Double
pow x y
  | even y    = pow (x `mul` x) (y `quot` 2)
  | y == 1    = x
  | otherwise = pow (x `mul` x) ((y - 1) `quot` 2) `mul` x

mul :: C Double -> C Double -> C Double
mul (C a b) (C d e) = C (a*d-b*e) (a*e+b*d)
}}}

=== peek.hs

This example involves reading a tuple of Ints from memory.

Status: needs -fcpr-depth=4 or higher.

{{{#!hs
{-# LANGUAGE BangPatterns #-}
module Foo (peek4) where

import Foreign.Storable
import Foreign.Ptr

peek4 :: Ptr Int -> Ptr Int -> (Ptr Int -> IO (Ptr Int, Ptr Int)) -> IO (Ptr Int, Ptr Int, (Int, Int, Int, Int))
peek4 ptr end req
  | end `minusPtr` ptr >= 32 = do
      val <- (,,,)
          <$> peekByteOff ptr 0
          <*> peekByteOff ptr 8
          <*> peekByteOff ptr 16
          <*> peekByteOff ptr 24
      let !ptr' = ptr `plusPtr` 32
      return (ptr', end, val)
  | otherwise = do
      (ptr', end') <- req ptr
      peek4 ptr' end' req
}}}