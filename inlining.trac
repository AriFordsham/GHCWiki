= Inlining =

Inlining is the most important compiler optimisation pass as it enables most other optimisation opportunities. The pass is simple, saturated names are replaced with their definitions, the details are complicated. The compiler must make judgements as to whether inlining a function will lead to further optimisations, if not then it is easy to increase the code size needlessly.

== Getting Started ==

* [http://research.microsoft.com/en-us/um/people/simonpj/Papers/inlining/ Secrets of the GHC inliner] -- quite an old paper but a great description of the main ideas
* [https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html?highlight=inline#inline-and-noinline-pragmas GHC User Guide] -- Provides a description of `INLINE`, `INLINABLE` and `NOINLINE` pragmas. 

== Relevant Tickets ==

There are lots of old relevant tickets related to inlining. Perfect for a keen newcomer!

[[TicketQuery(status=infoneeded,status=new|patch,keywords=~Inlining)]]

== Relevant Wiki Pages ==

* Commentary/Compiler/DesugaringInstances -- About how default methods can lead to poor inliner performance due to recursion