[[PageOutline]]
= Working conventions for working on GHC =

GHC is a BSD-licensed open-source project, and we welcome your help in making it better.
This page has pointers to information you'll need.

First, make sure you are familiar with GHC's [wiki:Licensing].  Unless you say otherwise, we will assume that if you submit a contribution to GHC, then you intend to supply it to us under the same license as the existing code.

These pages guide you step-by-step through making a contribution:

 * [wiki:WorkingConventions/FixingBugs How to fix a bug in GHC]
 * [wiki:WorkingConventions/AddingFeatures How to add a new feature to GHC]
 * [http://haskell.org/haskellwiki/Library_submissions How to propose a change to the libraries]

== Coding conventions ==

When you are editing GHC's source code, please follow our coding guidelines:

 * [wiki:Commentary/CodingStyle Coding style in the compiler]
 * [wiki:Commentary/Rts/Conventions Coding style in the runtime system]

== Validating patches and the test suite ==

Before you commit a patch you want to be reasonably sure you haven't broken anything.  So before you commit, you must '''validate''' your changes, using the '''regression test suite''':
 * The policy on validating patches, and how to perform validation, is at: [wiki:TestingPatches].
 * Details about the regression test suite, and how to use it are at: [wiki:Building/RunningTests]

== Using Darcs ==

Our conventions and some useful tips for using darcs are here: [wiki:WorkingConventions/Darcs].

== The Bug Tracker ==

We organise our work (both bug fixing and feature requests) using the Trac bug tracker.   There are links to the bug tracker in the sidebar under "View tickets" and "Create ticket". 

The following are GHC-specific policies regarding the fields of the Trac bug tracking system. (See also [wiki:ReportABug the bug reporting guidelines].)

 * '''Type''': When a bug is fixed, but the patch or patches still need to be merged to other branches, then
   don't close the bug, just change its type from '''bug''' or '''task''' to '''merge'''.  Also add a list of
   patches to be merged, and which branch to merge to, as a comment.

 * '''Severity''': this is set by the submitter of the ticket, and indicates how important the issue is to
   them, i.e. is it preventing them from doing something altogether, or just a minor annoyance.  The
   severity might be reduced if we discover a workaround.

 * '''Priority''': this field is for the GHC development team to help us prioritise what we work on.  Bugs
   that have a high severity will tend to be prioritised higher, as will bugs that are regressions from
   a previous release.

 * '''Milestone''': this field is for the GHC development team to indicate by when we intend to fix the bug.  We have a milestone for each release, and three special milestones:
   * An empty milestone field means the bug has not been triaged yet.  We don't yet know if the
     ticket is a real, unique, issue.  Once this has been established, the ticket will be given
     a milestone.
   * '''Not GHC''' is for tickets that are not tied to a GHC release, because they are in libraries
     or other software that is not released with GHC.  Bugs in the "extra libraries" typically fall
     into this category.
   * '''_|_''' is for tickets that have been triaged, but we don't plan to fix them for a particular
     release.  This might be because the bug is low priority, or is simply too hard to fix right now.

 * '''Test Case''': fill in this field with the name of the test in the test suite.  Typically every bug
   closed should have an appropriate test case added to the test suite.
