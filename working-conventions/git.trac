[[PageOutline]]
= Guidelines for using git with GHC =

GHC uses [http://git-scm.com/ Git] (version 1.7.3.4 or newer recommended) for revision control. This page describes various GHC-specific conventions for using Git, together with some suggestions and tips for using Git effectively.

= Setup =

This page is mostly concerned about using Git for contributing actively to GHC and extends upon the
instructions provided in [wiki:Building/GettingTheSources].

== General Guidelines ==

 * Try to make small patches (i.e. work in consistent increments).

 * Separate changes that affect functionality from those that just affect
   code layout, indentation, whitespace, filenames etc.  This means that
   when looking at patches later, we don't have to wade through loads of
   non-functional changes to get to the important parts of the patch.   

 * If possible, commit often.  This helps to avoid conflicts.

 * Your patches need to pass validation: see TestingPatches.

 * When making changes to other repositories in a GHC tree, see [wiki:/WorkingConventions/Git/Submodules].

== Author ==

Please make sure you have setup git to use the correct name and email for your commits. Use the same name and email on all machines you may push from.

{{{
$ git config --global user.name "Firstname Lastname" # Sets the name of the user for all git instances on the system
$ git config --global user.email "your_email@youremail.com"
}}}

This will set your name and email globally. To set it for just the GHC repo, remove the `--global` flag. Also, the environment variables `GIT_COMMITTER_NAME`, `GIT_COMMITTER_EMAIL`, `GIT_AUTHOR_NAME` and `GIT_AUTHOR_EMAIL` will override git-config settings if they are defined.

== Line endings ==

Files in GHC repos should use Unix conventions for line endings.
If you are on Windows, ensure that git handles line-endings sanely by running:
{{{
git config --global core.autocrlf false
}}}
To find out what files in your tree have windows (CRLF) line endings,  use
{{{
find . -name '*hs' | xargs file | grep CRLF
}}}
Do this before you commit them!

== Push access ==

If (as a developer) you have been granted push privileges to `git.haskell.org`, you need to take into account that only the `ssh://` URLs support authentication (and hence `git push`ing to).

The following Git URL rewrite rules (which need to be configured only once as they're persisted in the `${HOME}/.gitconfig` file due to `--global`) take care of transparently redirecting `git push`es to the `ssh://` Git URL counterparts:

{{{#!sh 
git config --global url."ssh://git@git.haskell.org/".pushInsteadOf git://git.haskell.org/ 
}}}

{{{#!comment
# This doesn't seem to work, it seems to override the setting above

# If you want to cover all bases, you can also set the following rewrite rules
git config --global url."ssh://git@git.haskell.org/".pushInsteadOf http://git.haskell.org/ 
git config --global url."ssh://git@git.haskell.org/".pushInsteadOf https://git.haskell.org/ 
}}} 

This uses the `ssh://` protocol (which has much higher latency due to the SSH handshake occurring for each connect) only for `git push` operations, and the very fast unauthenticated `git://` protocol for everything else (if you originally cloned `git://git.haskell.org/ghc.git`)

= Working with the tree =

== Tricks ==

See [wiki:WorkingConventions/Git/Tricks].

== Commit messages ==

Please try to follow the general convention for the [http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html Git commit message structure] as many Git tools rely on this. Moreover, take into account that the commit message text is interpreted as WikiFormatting in Trac.

In particular, if your patch addresses or fixes a bug/ticket, then include the ticket number in the form "`#NNNN`" in the commit message, e.g.
{{{
  withMVar family have a bug (fixes #767)
}}}
'''''Git will then add a link to the commit from the ticket''''' (as soon as the commit becomes reachable from the `master` HEAD), so that people watching the ticket can see that a fix has been committed, and in the future we can easily find the patch that addressed the ticket.  When navigating the Git history on Trac, you will also be able to jump directly to the ticket from the commit.

== Contributing patches ==

See: [wiki:WorkingConventions/FixingBugs how to contibute a patch to GHC].

= Submodules =

GHC uses many git repositories which are tracked as Git submodules. For more information, check the [wiki:WorkingConventions/Git/Submodules Submodules] page.

= Branches =

== The stable branch ==

See [wiki:WorkingConventions/Releases].

== Development branches ==

See ActiveBranches for a description of **known** development branches.

The live list of currently **existing** branches in the `ghc` repository can be browsed via http://git.haskell.org/ghc.git/heads.

New development branches names should be prefixed with `wip/` (e.g. "`wip/dependent-types`"), as otherwise the current Git server-side configuration disallows branch deletion and [http://stackoverflow.com/questions/4684352/whats-a-fast-forward-in-git non-fast-forward updates].
