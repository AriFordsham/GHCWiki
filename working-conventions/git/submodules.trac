[[PageOutline()]]

= Workflows for Handling GHC's Git Submodules =

GHC is a large project with several external dependencies. We use git submodules to track these repositories, and here you'll learn a bit about how to manage them.

General information about Git's submodule support:

 - [http://git-scm.com/docs/git-submodule "git submodule" manual page]
 - [http://git-scm.com/book/en/Git-Tools-Submodules Pro Git "6.6 Git Tools - Submodules" chapter]
 - [http://www.vogella.com/tutorials/Git/article.html#submodules Submodule Tutorial]

== Cloning a fresh GHC source tree ==

Initial cloning of GHC HEAD (into the folder `./ghc`) is a simple as:

{{{#!sh
git clone --recursive git://git.haskell.org/ghc.git
}}}

(Obviously, the clone URL can be replaced by any of the supported `ghc.git` URLs as listed on http://git.haskell.org/ghc.git)

== Updating an existing GHC source tree clone ==

Sometimes when you pull in new commits, the authors updated a submodule. After pulling, you'll also need to update your submodules, or you'll get errors.

At the top-level of `ghc.git` working copy:

{{{#!sh
git pull --rebase
git submodule update --init
}}}

{{{#!box note

In seldom cases it can happen that `git submodule update` aborts with an error similar to the following one

{{{
fatal: Needed a single revision
Unable to find current revision in submodule path 'libraries/parallel'
}}}

This means that for some (unknown) reason, the Git submodule in question is in an unexpected/corrupted state. The easiest remedy is remove the named path (or just move it out of the way in case it contains unsaved work), and retry. E.g.

{{{
rm -rf libraries/parallel
git submodule update --init
}}}

}}}

=== Using a Git alias ===

A commonly defined Git alias that combines the two commands into one convenient Git alias is:

{{{#!sh
git config --global alias.pullall '!f(){ git pull "$@" && git submodule update --init --recursive; }; f'
}}}

(the `--global` flag make this alias persist in the `${HOME}/.gitconfig` file, so this needs to be done only once, the `--recursive` option is not needed for GHC but it's commonly used for the `pullall` alias)

After setting this alias, one can now simply use the single invocation

{{{#!sh
git pullall --rebase
}}}

to update `ghc.git` and all its submodules.

== Making changes to GHC submodules ==

It's very important to keep in mind that Git submodules track commits (i.e. not branches!) to avoid getting confused. Therefore, `git submodule update` will result in submodules having checked out a so-called [http://alblue.bandlem.com/2011/08/git-tip-of-week-detached-heads.html detached HEAD].

So, in order to make change to a submodule you can either work directly on the detached HEAD, or checkout the respective branch the commit is supposed to be pointed at from. The example below will demonstrate the latter approach for the `utils/haddock` submodule:

{{{#!sh
# do this *before* making changes to the submodule
cd utils/haddock
git checkout master
git pull --rebase

# perform modifications and as many `git {add,rm,commit}`s as you deem necessary
$EDITOR src/somefile.hs

# finally, after you're ready to publish your changes, simply push the changes as for an ordinary Git repo
git push

# go back to ghc.git top-level
cd ../..
}}}

At this point, the remote `haddock.git` contains newer commits in the `master` branch, which still need to be registered with `ghc.git`:

{{{#!sh
# if you want, you can inspect with `git submodule` and/or `git status`
# if there are submodules needing attention;
# specifically, the commands below should report new commits in `util/haddock`
git submodule
git submodule summary
git status

# Register the submodule update for the next `git commit` as you would any other file
# Note: You can think of submodule-references as virtual files which 
#       contain a SHA1 string pointing to the submodule's commit.
git add util/haddock

# you can also add other changes in `ghc.git` (e.g. testsuite changes) and/or other submodules 
# you need to update atomically with the next commit
git add testsuite/...

# prepare a commit, and make sure to mention the string `submodule` in the commit message
git commit -m 'update haddock submodule ... blablabla'

# finally, push the commit to the remote `ghc.git` repo
git push
}}}

{{{#!box note
There are server-side validation hooks in place to make sure for non-`wip/` branches that `ghc.git` never points to non-existing commits. Also, as a safe-guard against accidental submodule reference updates, the string `submodule` must occur somewhere in commit messages of commits updating submodule references.
}}}

== TODO ==

- Describe how to make use of `git submodule update --remote`