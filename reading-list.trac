= The GHC reading list =

Suppose you want to start contributing to GHC.  What should you read by way of background?  Here is an annotated list.  Please add to it as you come across useful material.

== General background ==

 * Simon PJ's books:
   * [http://research.microsoft.com/en-us/um/people/simonpj/papers/slpj-book-1987/index.htm The Implementation of Functional Programming Languages]
   * [http://research.microsoft.com/en-us/um/people/simonpj/papers/pj-lester-book/ Implementing Functional Languages: a tutorial]
   give useful general background. They are not GHC-specific at all, but they have lots of information about functional-language compilers.

 * The [wiki:Commentary GHC Commentary] is a Wiki that describes GHC's implementation.  It is a Wiki.  That means that you can, and should, fix errors and write new chapters.

 * Simon PJ's [http://research.microsoft.com/~simonpj home page] and [http://research.microsoft.com/en-us/um/people/simonpj/papers/papers.html publications page] have lots of relevant papers.  Some key ones appear below but not all.

== Types and type inference ==

 * [http://haskell.org/haskellwiki/Simonpj/Talk:OutsideIn Modular type inference with local assumptions], Simon Peyton Jones, Dimitrios Vytiniotis, Tom Schrijvers, Martin Suzmann, Journal of Functional Programming, 2011.  This epic 83-page JFP paper brings together, in a single uniform framework, a series of our earlier papers on type inference for type systems involving local constraints, including GADTs and indexed type families.  

 * [http://research.microsoft.com/en-us/um/people/simonpj/papers/unboxed-values.ps.Z Unboxed values as first class citizens], SL Peyton Jones and J Launchbury, Functional Programming Languages and Computer Architecture (FPCA'91), Boston, LNCS 523, Springer Verlag, Sept 1991, pp636-666. How unboxed data types work in GHC.

Please add: System FC, GADTs, kind polymorphism etc

== Optimisations ==

 * [http://research.microsoft.com/en-us/um/people/simonpj/papers/comp-by-trans-scp.ps.gz A transformation-based optimiser for Haskell], SL Peyton Jones and A Santos, Science of Computer Programming 32(1-3), pp3-47, September 1998.  Gives an overview of many of the transformations GHC does on Core.  Andre's [http://research.microsoft.com/en-us/um/people/simonpj/papers/santos-thesis.ps.gz PhD thesis] gives more details.

 * [http://research.microsoft.com/en-us/um/people/simonpj/papers/inlining/index.htm Secrets of the GHC inliner], Simon Peyton Jones and Simon Marlow, Journal of Functional Programming 12(4), July 2002, pp393-434.  Describes how the Simplifier does inlining.

 *  [http://research.microsoft.com/en-us/um/people/simonpj/papers/deforestation-short-cut.ps.Z A short cut to deforestation], A Gill, SL Peyton Jones, J Launchbury, Proc Functional Programming Languages and Computer Architecture (FPCA'93), Copenhagen, June 1993, pp223-232.  The famous foldr/build rule.  Andy's [http://research.microsoft.com/en-us/um/people/simonpj/papers/andy-thesis.ps.gz PhD thesis] has more.  

 * [http://research.microsoft.com/en-us/um/people/simonpj/papers/rules.htm Playing by the rules: rewriting as a practical optimisation technique in GHC], Simon Peyton Jones, Andrew Tolmach and Tony Hoare, Haskell Workshop 2001.  Describes how RULES work, which are heavily used in GHC.

== Back end issues ==

 * [http://research.microsoft.com/en-us/um/people/simonpj/papers/eval-apply/index.htm How to make a fast curry: push/enter vs eval/apply], Simon Marlow and Simon Peyton Jones, International Conference on Functional Programming, Snowbird, Sept 2004, pp4-15.

 * [http://research.microsoft.com/~simonpj/papers/spineless-tagless-gmachine.ps.gz Implementing lazy functional languages on stock hardware: the Spineless Tagless G-machine], SL Peyton Jones, Journal of Functional Programming 2(2), Apr 1992, pp127-202.  The original STG paper but still highly relevant.

Please add: Hoopl, C--.

== Data Parallel Haskell ==

Please fill in...