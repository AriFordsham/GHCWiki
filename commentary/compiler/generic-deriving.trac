= The new Generic Deriving mechanism (ongoing work) =

GHC includes a new (in 2010) mechanism to let you write generic functions.  It is described in paper [http://www.dreixel.net/research/pdf/gdmh_nocolor.pdf A generic deriving mechanism for Haskell]. This page sketches the specifics of the implementation; we assume you have read the paper. The [http://www.haskell.org/haskellwiki/Generics HaskellWiki page] gives a more general overview.

This mechanism replaces the [http://www.haskell.org/ghc/docs/6.12.2/html/users_guide/generic-classes.html previous generic classes implementation]. What we describe until the "Kind polymorphic overhaul" section is implemented and released in GHC 7.0.1.

== Main components ==

 * `TcDeriv.tcDeriving` now allows deriving `Generic` instances.

 * The representation types and core functionality of the library live on `GHC.Generics` (on the `ghc-prim` package).

 * Many names have been added as known in `prelude/PrelNames`

 * Most of the code generation is handled by `types/Generics`

== Things that have been removed ==

 * All of the [http://www.haskell.org/ghc/docs/6.12.2/html/users_guide/generic-classes.html generic classes stuff]. In particular, the following have been removed:
   * `hasGenerics` field from `TyCon`;
   * `HsNumTy` constructor from `HsType`;
   * `TypePat` constructor from `Pat`.

 * The `-XGenerics` flag is now deprecated.

== What already works ==

 * `Generic` instances can be derived when `-XDeriveGeneric` is enabled.

 * The `default` keyword can used for generic default method signatures when `-XDefaultSignatures` is enabled.

 * Generic defaults are properly instantiated when giving an instance without defining the generic default method.

 * Base types like `[]`, `Maybe`, tuples, come with Generic instances.

== Testing ==

 * Tests are available under the `generics` directory of the testsuite.

= Kind polymorphic overhaul =

Work in progress.