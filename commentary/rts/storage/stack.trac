

= Layout of the stack =

Every [wiki:Commentary/Rts/HeapObjects#ThreadStateObjects TSO object] contains a stack.  The stack of a TSO grows downwards, with the topmost (most recently pushed) word pointed to by {{{tso->sp}}}, and the bottom of the stack given by {{{tso->stack + tso->stack_size}}}.

The stack consists of a sequence of ''stack frames'' (also sometimes called ''activation records'') where each frame has the same layout as a heap object:

|| Header || Payload... ||

There are several kinds of [wiki:Commentary/Rts/Stack#KindsofStackFrame stack frame], but the most common types are those pushed when evaluating a {{{case}}} expression:
{{{
  case e0 of p1 -> e1; ...; pn -> en 
}}}
The code for evaluating a {{{case}}} pushes a new stack frame representing the alternatives of the case, and continues by evaluating {{{e0}}}.  When {{{e0}}} completes, it returns to the stack frame pushed earlier, which inspects the value and selects the appropriate branch of the case.  The stack frame for a {{{case}}} includes the values of all the free variables in the case alternatives.

== Info tables for stack frames ==

The info table for a stack frame has a couple of extra fields in addition to the [wiki:Commentary/Rts/HeapObjects#InfoTables basic info table layout].  A stack-frame info table is defined by {{{StgRetInfoTable}}} in [[GhcFile(includes/rts/storage/InfoTables.h)]].

[[Image(ret-itbl.png)]]

(ignore the "return vector" part of the above diagram; return vectors were removed from GHC in version 6.8.1)
The ''SRT'' field points to the static reference table (SRT) for this stack frame (see [wiki:Commentary/Rts/CAFs] for details of SRTs).

== Layout of the payload ==

Unlike heap objects which mainly have "pointers first" layout, in a stack frame the pointers and non-pointers are intermingled.  This is so that we can support "stack stubbing" whereby a live variable stored on the stack can be later marked as dead simply by pushing a new stack frame that identifies that slot as containing a non-pointer, so the GC will not follow it.

Stack frames therefore have [wiki:Commentary/Rts/HeapObjects#Bitmaplayout bitmap layout].

== Kinds of Stack Frame ==

(defined in [[GhcFile(includes/rts/storage/ClosureTypes.h)]])

 * {{{RET_BCO}}}
 * {{{RET_SMALL}}}
 * {{{RET_BIG}}}
 * {{{RET_DYN}}}
 * {{{RET_FUN}}}
 * {{{UPDATE_FRAME}}}
 * {{{CATCH_FRAME}}}
 * {{{STOP_FRAME}}}
 * {{{ATOMICALLY_FRAME}}}
 * {{{CATCH_RETRY_FRAME}}}
 * {{{CATCH_STM_FRAME}}}
