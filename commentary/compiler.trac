

= GHC Commentary: The Compiler =

The compiler itself is written entirely in Haskell, and lives in the many sub-directories of the [[GhcFile(compiler)]] directory.  Here is a block diagram of its top-level structure:

[[Image(ghc-top.png)]]

== Contents ==

 * [wiki:ModuleDependencies Compiler Module Dependencies] (deals with the arcane mutual recursions among GHC's many data types)
 * [wiki:Commentary/CodingStyle Coding guidelines]
     [[BR]][[BR]]
 * [wiki:Commentary/Compiler/HscMain Compiling one module: HscMain]
 * Key data types (Simon PJ's diagram is attached at the bottom of this document):
   * [wiki:Commentary/Compiler/HsSynType The source language: HsSyn] 
   * [wiki:Commentary/Compiler/RdrNameType RdrNames, Modules, and OccNames]
   * [wiki:Commentary/Compiler/NameType Names]
   * [wiki:Commentary/Compiler/EntityTypes Entities]: variables, type constructors, data constructors, and classes.
   * Types: [wiki:Commentary/Compiler/TypeType Type and Kind], [wiki:Commentary/Compiler/FC equality types and coercions]
   * [wiki:Commentary/Compiler/CoreSynType The core language]
   * [wiki:Commentary/Compiler/StgSynType The STG language]
   * [wiki:Commentary/Compiler/CmmType The Cmm language]
   * ModIface, ModDetails, ModGuts
 * Passes:
   * [wiki:Commentary/Compiler/Renamer Renamer]
   * Typechecker
   * Desugarer
   * Core->core
     * [wiki:Commentary/Compiler/StrictnessAnalysis Strictness analysis]
   * Core->CorePrep
   * [wiki:Commentary/Compiler/Core2Stg CorePrep->Stg]
   * [wiki:Commentary/Compiler/CodeGen The code generator]: Stg->Cmm
       [[BR]][[BR]]
 * [wiki:Commentary/Compiler/API The GHC API]
 * [wiki:Commentary/Compiler/SymbolNames Symbol names and the Z-encoding]
 * [wiki:Commentary/Compiler/TemplateHaskell Template Haskell]
 * [wiki:Commentary/Compiler/WiredIn Wired-in and known-key things]
 * [wiki:Commentary/Compiler/Packages Packages]
 * [wiki:Commentary/Compiler/Finder The Finder]
 * [wiki:Commentary/Compiler/Backends Backends]:
   * [wiki:Commentary/Compiler/Backends/PprC C code generator]
   * [wiki:Commentary/Compiler/Backends/NCG Native code generator]

The GHC API is the interface exported by compiler/main/GHC.hs. To compile a Haskell module that uses the GHC API, use the flag {{{-package ghc}}} (in GHC 6.6 and later). GHC itself contains a few front-ends: 

 * The "one-shot" mode, where GHC compiles each file on the command line separately (eg. {{{ghc -c Foo.hs}}}). This mode is implemented
   directly on top of [wiki:Commentary/Compiler/HscMain HscMain], since it compiles only one file at a time. In fact, this is all that   
   GHC consisted of prior to version 5.00 when GHCi and --make were introduced.

 * GHCi, the interactive environment, is implemented in [[GhcFile(compiler/ghci/InteractiveUI.hs)]] and sits squarely on top of the GHC
   API.
 
 * {{{--make}}} is almost a trivial client of the GHC API, and is implemented in [[GhcFile(compiler/main/Main.hs)]]. 

 * {{{-M}}}, the Makefile dependency generator, is also a client of the GHC API and is implemented in
   [[GhcFile(compiler/main/DriverMkDepend.hs)]]. 

Note that since GHC is packaged as a single binary, all of these front-ends are present, and there is a single command-line interface implemented in [[GhcFile(compiler/main/Main.hs)]].
