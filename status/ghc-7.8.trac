= Release plans for GHC 7.8 =

== Timeline ==

The planned timeline for 7.8 is to have a feature freeze approximately at the time of ICFP, followed by a period of frantic bugfixing. A release candidate (and the 7.8 branch) will be formed after this, likely sometime in October.

== Tickets ==

We would like to fix all of the [http://ghc.haskell.org/trac/ghc/query?priority=highest&priority=high&status=infoneeded&status=merge&status=new&status=patch&milestone=7.8.1&col=id&col=summary&col=status&col=type&col=priority&col=milestone&col=component&order=priority high and highest priority tickets in the 7.8.1 milestone], but there are currently a lot of them so this seems optimistic. Please feel free to take a ticket and help us!

== Completed new features ==

The features already completed are documented in the release notes:
[[GhcFile(docs/users_guide/7.8.1-notes.xml)]]

== Pending new features ==

The following **new** features are planned for 7.8 **but have not yet made it**. They are at varying degrees of completeness, and may not all make it in.

 * Jan Stolarek has completed the [wiki:PrimBool boolean-primop story], but they are going through a major refactoring. Things still on the TODO list for this feature:
   * Jan Stolarek needs to refactor code of GHC and boot libraries.
   * Jan Stolarek needs to send patches for Alex and Happy to Simon Marlow and patches for primitive to Roman Leschinskiy.
   * Simon Marlow needs to update new versions of Alex and Happy to Hackage
   * Jan Stolarek can then push his changes into HEAD
   * Roman Leschinskiy needs to upload new version of primitive to Hackage
   * Herbert Valerio Riedel can then pull latest version of primitive into GHC tree. 
   * Austin Seipp will implement shim package for backwards compatibility. See [http://www.haskell.org/haskellwiki/Compatibility_Modules the compatibility module page].

 * Trevor Elliot and Iavor Diatchki have implemented [wiki:GhcKinds/KindsWithoutData].  Not yet clear whether they'll be ready for 7.8

 * Geoff Mainland is working on a better Template Haskell implementation (http://ghc.haskell.org/trac/ghc/wiki/TemplateHaskell/BlogPostChanges, http://gmainland.blogspot.co.uk/2013/05/type-safe-runtime-code-generation-with.html), in the `th-new` branch of various repos. ETA: September 13.

 * Geoff Mainland is working generalising the support for SSE-like instructions. ETA: September 13.

 * ~~Iavor Diatchki is working on type-level nats (#4385, http://ghc.haskell.org/trac/ghc/wiki/TypeNats).  The plan is to support simple type-level arithmetic in GHC 7.8. The branch `type-nats-simple` has the code.~~ '''Merged'''.

 * Austin Seipp would like to do some official ARMv7 binary releases with a working stage2 compiler and GHCi, but there are probably some bugs waiting here.

 * Austin also still has a lingering patch for #7602 to fix a large OS X performance regression, but it's still not merged. The final details must be sorted out with Simon Marlow.

 * Edsko de Vries and Luite Stegeman are working an improved story for hooking into the compilation pipeline, using the GHC API. They have improvements they'd like to land this week.

 * Dynamic GHCi (#3658). This is working in HEAD, and enabled if `DYNAMIC_GHC_PROGRAMS=YES`. Currently it's enabled by default if dynamic libraries are supported, except for FreeBSD and Windows.
   On FreeBSD the reason it's disabled is due to a bug in FreeBSD's rtld. This has been fixed, but we're waiting for the fix to make it into releases. This might be in time for 7.8, but certainly will be for 7.10. See #7819.
   On Windows, there are a couple of build time annoyances: `-dynamic-too` doesn't work on Windows (#8228), and linking takes a very long time when dynamic linking is used (#8229). There's no technical reason why it couldn't be enabled, though.
   The plan is/was to use dynamic GHCi on as many platforms as possible in 7.8, and to remove support for non-dynamic-ghci in HEAD soon after. See discussion in #8039, however.

 * Ryan Newton has added a larger set of atomic memory primops than were previously available. The set of !PrimOps may continue to expand slightly, but for now includes `casArray#`, `casIntArray#`, and `fetchAddIntArray#`.  In future work, Carter Schonwald will provide optimized (inline) versions of these !PrimOps, at least for the LLVM backend.

 * ~~The Applicative-Monad warnings would preferably go in (see #8004.)~~ '''Merged'''.

 * [wiki:NewtypeWrappers Newtype wrappers], by Joachim Breitner. **This will go in soon, but not really be advertised as a stable feature**.

== Features that will definitely not make it  ==

 * [wiki:Records/OverloadedRecordFields/Plan Overloaded record fields], by Adam Gundry (GSOC).  Not sure if this will be done.

 * [wiki:PatternSynonyms], by Gergo Erdi. Progress tracked at #5144.

 * [wiki:ExplicitTypeApplication Explicit type application] (Stephanie and her students)