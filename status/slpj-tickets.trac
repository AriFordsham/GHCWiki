= This page collects tickets that Simon PJ is interested in, so that he remembers them =

== Type inference ==
 * #5591: add left/right back to coercions
 * #5682: Parsing of pomoted kinds
 * #6049, #6093, #6137: GADTs and polykinds
 * #6022: over-general types are inferred
 * #6065: suggested type sig is then rejected
 * #5913, #5751, #6117: type-class dictionary loops
 * #5642, #5970, #5030: slow constraint solving

 * #6018: Injective type families (patch offered)
 * #5939, #5936: Pedro's generics
 * #5863: deriving `Typeable` for data families
 * [wiki:NewAxioms] Pattern matching axioms

== Template Haskell ==
 * #6064: binders in `InstanceD`
 * #5612: support for kinds (patch available)
 * #1475: allow splicing of import declarations
 * #5854: INLINABLE pragmas (patch offered)
 * #4364: cycle in type declarations
 * #5469, #4429: `reinerp` work on `newName` and export reorganisation
 * #5375: semantics of `newName`

== Optimisation ==
 * #5623, #5954: performance regression. Duplication of primops?
 * #6070, #5949, #5775, #4267, #5302, #6087: Demand analysis
 * #5075, #3138: CPR for sum types (mostly done, needs finishing)
 * #2289, #2387, #1600: nested CPR analysis	
 * #5996, #149, #2940: CSE (patch offered)
 * #6047: GHC retains unnecessary binding
 * #6135: unboxed booleans
 * #5916: `runST` isn't free
 * #5522, #6092: liberate-case runs out of memory
 * #5366, #3990: UNPACK for data families, and with phantom types, needs data con wrapper refactoring

== GHCi ==
 * #5527: `mkTopLevEnv: interpreeted`.  (Paolo)

== Features ==
 * #5972: option to suppress record selectors

----------------------
=== Arity ===
 * #5809: arity analysis could be better
 * #3924: weak arity leads to weak strictness
 * #3698: arity analysis again
 * #3697: class method selectors
 * #3034: divInt and arity
 * #2915: arity too small
 * #2823: another arity expansion bug (related to dictionaries)
 * #2440: bad code with type families; I believe this is also arity-related
 * #1547: profiling and arity

=== Inlining ===
 * #3872, #5400, #5448, #5722: contravariant data type loop in simplifier inliner
 * #4833: finding the right loop breaker
 * #3781, #3755: inlining for local functions: discount for scrutinising free vars
 * #3765: CONLIKE things and case expressions (need two unfoldings)
 * #3073 and [wiki:Commentary/Compiler/DesugaringInstances]: better desugaring for instances
 * #2078: INLINing improvement; ask Christian.Maeder@dfki.de to see if it improves CASL
 * #2840: top level unlifted string literals
 * #3123: feature request: recursive inlining and peeling
 * #4960: better inlining tests

== New code generator ==
 * Summary ticket: #4258, and [wiki:Commentary/Compiler/NewCodeGen wiki page]
 * #4065: forward propagation
 * #3132: fix cgCase of !PrimAlts
 * #3458, #1216: undesirable allocation of something that is nearly a let-no-escape
 * #3462: allocate large objects with `allocateLocal()`
 * #2253: NCG could do better. Look at this when John D’s ncg is working
 * #2289: cheap check at start of case alternatives
 * #2731: avoiding unnecessary evaluation when unpacking constructors
 * #3940: propagate fix

=== Optimiser ===
 * #6040, #5945: lambda-lift functions with a few args, just before code gen
 * #5059: specialise on value arguments
 * #5974: casts and RULES interaction
 * #5262: seq magic
 * #605: strict/unboxed enumerations
 * #2607: space leak: inlining defeats selector thunk optimisation
 * #4470: merge identical counters
 * #2439: Strict dictionaries
 * #2988: better float-in
 * #2132: Optimise nested comparisons: if you know x>0 then you know x>=1 etc.  Maybe a special pass that knows about arithmetic?  (Patch offered)
 * #2255, #3767, #2642, #3831, #4941: Improve '''`SpecConstr`''' for free variables, and for join points.
 * #2374: SAT and `MutableByteArray`	Max?

=== Compiler performance ===
 * #2346: desugaring let-bindings
 * Use wildcards for dead variables in interface files.

== Tiresome arithmetic things ==
 * #5615: poor code for div with powers of 2
 * #4101: constant folding for `(**)`
 * #3676: `realToFrac` conversions
 * #3744: comparisons against `minBound` and `maxBound` are not optimised away
 * #3065: quot is sub-optimal
 * #2269: Word type to Double or Float conversions 

== GHCi ==
 * #4017: unhelpful GHCi message
 
------------------------
== Outright bugs ==

 * #2182: GHCi session retains instance after removing a module from scope	
 * #1241: Lifting the Coverage Condition for functional dependencies isn’t the Right Thing	Manuel

------------------------
== New constraint simplifier ==

 * [wiki:TypeFunctionsStatus]
 * #4296: !SkolemOccurs
 * #816. #3108: extreme delicacy in solve order, involving fundeps
 * #4175: better GHCi info for type-function instances

== Types and type inference ==
 * #6065: GHC suggests a type signature that it then rejects
 * #5320: overlap delicacy
 * #4347, #4295: impredicativity
 * #5267, #5609, #5777, #344: bugs in arrows; awaiting refactoring by Dan
 * #1965: make existentials have a really cheap implementation
 * #5224: make it cheaper to check for inconsistent type family instances
 * #4466, #5296: explicit type application
 * #3714: distinguish type parameters from indices
 * #4259: overlapping type family instances
 * #3490: superclasses and ambiguity
 * #3632: better update for records with existentials
 * #1496, #4846: Newtype deriving and type families type soundness problem
 * #2641: revise what `-XExtendedDefaultRules` does

=== Better error messages ===
 * #4921: ambiguous type variables
 * #1330: another bad error message (Church2)
 * #2648: Report out of date interface files robustly	
 * #2588: Better error message about ‘forall’	
 * #1928: Confusing type error message (Claus makes suggestions)	
 * #2534: Another confusing type error message	
 * #2900: Improve decomposition of function types

------------------------
== Template Haskell == 
 * Blog post: [http://hackage.haskell.org/trac/ghc/blog/Template%20Haskell%20Proposal]
 * #1012: mutually recursive modules and TH
 * #5959: top level splices and renaming
 * #5416: local modules
 * #4364: type synonym loop
 * #4372: better quasiquotation support
 * #2041: Splicing in concrete syntax
 * #1475: Allow TH to generate import declarations	
 * #2340: Better TH error recovery.  Easy to do; change to signature of qRecover.
 * #4222: design of reification for TH

== Features == 
 * #5462: deriving for arbitrary classes
 * #6032: discussion about when foralls can be to the right of an arrow.
 * #6024: allow defining a ''kind'' without also getting the corresponding ''type''
 * #5927: Constraints with universal quantification
 * #5630: External core needs love
 * #5429: docase and joinads
 * #5391: better deriving Typeable
 * #5248: Infer context in type signatures
 * #5144: pattern synonyms
 * #5073: `blockST` and friends
 * #788, #2895: Class aliases 
 * #2595: record updates
 * #4823: strength reduction for array indexing
 * #4479: type directed name resolution (TDNR)
 * #4426: simpler rule for implicit quantification
 * #4359: lambda case
 * #4148: improvements to mdo syntax
 * #595, #5728, #3927, #5724, #5762, #4139, #6124: '''pattern-match overlap checking''', including with GADTs
 * #3701: Implicitly declared existentials: a class as a type
 * #3217: better flag handling for GHCi
 * #2600, #2110: '''Bind type variables and constraints in RULES'''
 * #1930: Infix type operators:  a+b.	
 * #960: Generate local info for ‘undefined’.  Implicit location parameters in general	
 * #2135: Warn when exporting a function whose type mentions a type constructor defined locally but not itself exported	
 * #2526: Add -fwarn-missing-export-signatures	
 * #2119: Explicitly importing deprecated symbols should generate deprecation warnings	
 * #2207: Load interfaces for GHC.* even without -O	
 * #1231: Better deprecations	

--------------------------
== Not sure what to do about these ==
 * #2284: the state-hack "optimisation" causes much re-computation
 * #4005: generational GC pathalogical case
 * #1349: strict function argument types
