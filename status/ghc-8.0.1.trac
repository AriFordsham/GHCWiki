= GHC plans for 7.12.1 =

[[PageOutline]]


This page is our road-map for what will be in 7.12.

 * We hope to incorporate all the "Landed" and "In-flight" stuff under "Release highlights" below.

 * We'll include (or at least review) all patches in tickets in "Status: patch" below.

 * We will address all the tickets under "Status: new" below with "highest" or "high" priority.  We love help to do more, but there are far too many "normal" tickets to make any promises.

If you believe your favourite thing belongs in this list, but isn't there, please yell.  If it's not in the road map, it probably won't get done.  Without a lot of support, many things in the road map won't get done either, so we need your help!

== Dates ==

Release candidate by'' mid-December 2015'''. Release in '''January 2016'''.

== Release highlights

Below are the major highlights of 7.12. 

=== Landed in HEAD

  - Support for [wiki:ExplicitCallStack/ImplicitLocations implicit parameters providing callstacks/source locations], allowing you to have a light-weight means of getting a call-stack in a Haskell application. (Phab:D861)

  - Improved optimization diagnostics. The compiler is now more liberal about issues warnings of potentially non-firing rewrite rules

  - Support for wildcards in data and type family instances (Phab:1092)

=== In-flight, and likely to land in time

  - A new, type-indexed type representation, `data TTypeRep (a :: k)`. See [wiki:TypeableT].

  - Visible type application (Phab:D1138)

  - Support for deriving the `Lift` typeclass (Phab:D1168)

  - Support for reasoning about kind equalities, which gives promotion of GADTs to kinds, kind families, heterogeneous equality (kind-indexed GADTs), and `* :: *`. There is some discussion in [wiki:DependentHaskell/Phase1], but that's very low-level. I (Richard) have no good user-oriented write-up yet, but there shouldn't be much in the way of new syntax -- just fewer type errors.

  - Support for [wiki:InjectiveTypeFamilies Injective Type Families], which allows you to specify type families which are injective, i.e. a one-to-one relationship. (Phab:D202)

  - Support for [wiki:StrictPragma Strict Haskell] including both the `StrictData` and `Strict` language extensions

  - Support for [wiki:OverloadedRecordFields Overloaded Record Fields], allowing multiple uses of the same field name and a form of type-directed name resolution.

  - A huge improvement to pattern matching (including much better coverage of GADTs), based on the work of Simon PJ and Georgios Karachalias. For more details, see [http://research.microsoft.com/en-us/um/people/simonpj/papers/pattern-matching/gadtpm.pdf their paper].

  - Backpack is chugging along; we have a new user-facing syntax which allows multiple modules to be defined a single file, and are hoping to release at least the ability to publish multiple "units" in a single Cabal file.

  - Support for [wiki:ApplicativeDo Applicative Do], allowing GHC to desugar do-notation to `Applicative` where possible.

  - Improved [wiki:DWARF DWARF based debugging support] from Peter Wortmann & Arash Rouhani, with e.g. LLVM support and Haskell backtraces from Haskell code.

  - An [wiki:ImprovedLLVMBackend Improved LLVM Backend] that ships with every major Tier 1 platform.

=== Possible, if the authors push forward fast enough

  - Support for '''Type Signature Sections''', allowing you to write `(:: ty)` as a shorthand for `(\x -> x :: ty)`.
  - A (possible) overhaul of GHC's build system to use '''Shake''' instead of Make.
  - A `DEPRECATED` pragma for exports (#4879)

== Migration Guide to 7.12

FIXME: Write the migration guide.

https://ghc.haskell.org/trac/ghc/wiki/Migration/7.12

== Tickets marked merge with no milestone

[[TicketQuery(status=merge,milestone=,format=table,col=type|summary|priority|owner,group=status)]]

== Tickets slated for 7.12.1

=== merge/patch/upstream

[[TicketQuery(milestone=7.12.1,status=merge|patch|upstream,format=table,col=type|summary|priority|differential|owner,group=status,order=priority)]]

=== new

[[TicketQuery(milestone=7.12.1,status=new,format=table,col=type|summary|priority|owner,group=status,order=priority)]]

=== infoneeded

[[TicketQuery(milestone=7.12.1,status=infoneeded,format=table,col=type|summary|priority|owner,group=status,order=priority)]]
