= Building GHC on Windows =

This page documents the instructions for setting up a Windows build using [http://sourceforge.net/projects/msys2/ MSYS2], which is a fairly complete build of MinGW + the MSYS2 tools.

This guide should get you running in ~5 minutes, modulo download speeds.

== msys2 setup ==

Download and run the [http://sourceforge.net/projects/msys2/files/latest/download msys2 installer (64-bit)], or the [http://sourceforge.net/projects/msys2/files/Base/i686/msys2-i686-20140910.exe/download 32-bit version]. Open a mingw64 shell.

'''IMPORTANT:''' the msys2 installer creates multiple shortcuts, "MSYS2 Shell", "MinGW-w64 Win32 Shell" and "MinGW-w64 Win64 Shell". You need the latter one (or the middle one for 32-bit). The MSYS2 shell is set up for building applications with Cygwin which provides an additional POSIX compatibility layer, while MinGW is set up for building native Windows applications which is what we need for GHC. 

An easy way to check that you are running the right shell is to check the output of `echo $PATH`. The first item of the list should be `/mingw64/bin`. Also, `echo $MSYSTEM` should show either `MINGW32` or `MINGW64`.

If you are using a preexisting msys2 installation, consider upgrading all installed packages to the latest versions. That takes a few steps, see [http://sourceforge.net/p/msys2/wiki/MSYS2%20installation/ MSYS2 installation instructions] (section III).

== Installing packages & tools ==

The msys2 package uses `pacman` (the venerable !ArchLinux package manager) to manage packages. Let's install system dependencies required for building GHC:

{{{
pacman -Sy git curl tar binutils autoconf make libtool automake mingw-w64-x86_64-gcc
}}}

(Problems with PGP keys? Try `pacman-key --init` and `pacman-key --populate msys2`)

{{{#!rbox question
Why can't we use CygWin/MSYS2's packaged Python interpreter? It seems to work just fine...
}}}
If you want to run tests, you will need to install a Windows version of [https://www.python.org/download/releases/2.7.8/ Python 2]. Python is only used by the test runner and is not necessary for building GHC.

== Host GHC setup ==

A host GHC binary is required for bootstrapping. Let's download and install a prebuilt GHC into /usr/local:

{{{
curl http://www.haskell.org/ghc/dist/7.8.3/ghc-7.8.3-$(uname -m)-unknown-mingw32.tar.xz | tar -xJ -C /tmp &&
mkdir -p /usr/local &&
mv /tmp/ghc-7.8.3/* /usr/local &&
rmdir /tmp/ghc-7.8.3
}}}

== Cabal setup ==

Building ghc requires [http://www.haskell.org/alex/ Alex] and [http://www.haskell.org/happy/ Happy]. It is easiest to install them using cabal. We will also put them in `/usr/local` to make sure that they end up on $PATH.

{{{
curl http://www.haskell.org/cabal/release/cabal-install-1.20.0.3/cabal-1.20.0.3-i386-unknown-mingw32.tar.gz | tar -xz -C /usr/local/bin &&
cabal update &&
cabal install -j --prefix=/usr/local alex happy
}}}

== A Quick Build ==

You should now be able to build GHC:

{{{
cd ~ &&
git clone --recursive git://git.haskell.org/ghc.git &&
cd ghc &&
git clone git://git.haskell.org/ghc-tarballs.git ghc-tarballs
}}}

Consider setting up `mk/build.mk` here (`cp mk/build.mk.sample mk/build.mk && vim mk/build.mk`).

Finally, to perform the actual build:

{{{
./boot &&
./configure &&
make -j5
}}}

Msys2 is known to be glitchy in some situations. If you see errors related to fork(), try closing and reopening the shell. Also there have been issues with the build process segfaulting. The reason is not known (we're looking into it). If that happens, simply rerunning `make` will continue the build process.

Alternatively, to run a pristine build and tests (takes a while):
{{{
./validate
}}}

== Setting up up `sshd` ==

As most GHC developers are used to work on Unix workstations, having to use a graphical remote desktop session to access the CygWin/MSYS2 environment is rather disruptive to typical workflows. By setting up a SSH daemon inside the MSYS2 environment, such a CygWin/MSYS2 environment can be treated almost as yet another remote Unix environment.

While on CygWin setting up `sshd` is taken care of by the provided `ssh-host-config` shell script which creates the required user accounts and installs `sshd` as a system service in Windows, with MSYS2 these steps need to be performed manually. To this end, here's the steps needed to setup `sshd` manually (which I had to find out the hard, time-consuming way, hence documenting them here):

 - `pacman -S cygrunsrv openssh`
 - `ssh-keygen -A`

 - Create priviledged `cyg_server` user (required in most current Windows versions)
{{{#!sh

# will be used as HOME
dos_var_empty=$(/usr/bin/cygpath -w /var/empty)

# create some random password; this is only needed internally by cygrunsrv
_password=... 

username=cyg_server
unpriv_user=sshd

# Usually, 'admingroup=Administrators'
admingroup=$(/usr/bin/mkgroup -l | /usr/bin/awk -F: '{if ( $2 == "S-1-5-32-544" ) print $1;}')


# NB: From some reason, calling `net` doesn't work in MSYS's bash (seems that '/' isn't passed transparently)
net user "${username}" "${_password}" /add /fullname:"Privileged server" /homedir:${dos_var_empty} /yes

net localgroup "${admingroup}" "${username}" /add

net user "${unpriv_user}" /add /fullname:"${unpriv_user} privsep" "/homedir:${dos_var_empty}" /active:no

# set infinite passwd expiry
passwed -e ${username}

# set required priviledges; 
# NOTE: `editrights.exe` doesn't seem to be packaged in MSYS2 yet;
#       use editrights.exe + cygwin1.dll from a CygWin install for the meantime.
editrights -a SeAssignPrimaryTokenPrivilege -u ${username} && \
editrights -a SeCreateTokenPrivilege -u ${username} && \
editrights -a SeTcbPrivilege -u ${username} && \
editrights -a SeDenyRemoteInteractiveLogonRight -u ${username} && \
editrights -a SeServiceLogonRight -u ${username}

# add passwd entry
pwd_entry="$(/usr/bin/mkpasswd -l -u "${username}" | /usr/bin/sed -n -e '/^'${username}'/s?\(^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\).*?\1'/var'/empty:/bin/false?p')"
echo "${pwd_entry}" >> "/etc/passwd" 

pwd_entry="$(/usr/bin/mkpasswd -l -u "${unpriv_user}" | /usr/bin/sed -n -e '/^'${unpriv_user}'/s?\(^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\).*?\1'/var'/empty:/bin/false?p')"
echo "${pwd_entry}" >> "/etc/passwd" 

# finally, register service with cygrunsrv
/usr/bin/cygrunsrv -I sshd -d "CYGWIN sshd" -p /usr/bin/sshd -a "-D" -y tcpip -u cyg_server -w "${_password}"

# the SSH service should start up automatically when the Windows VM is rebooted. You can manually restart the service by running `net stop sshd` + `net start sshd`
net start sshd

# if something doesn't work, make sure  /etc/ssh*_* /var/empty /var/log/lastlog /var/log/sshd.log are accessible by cyg_server user.


# NB: if you need to tweak env-vars such as PATH or MSYSTEM, use ~/.bashrc or ~/.bash_profile
}}}



== Other documentation ==

Other documentation for Windows includes:

 * [wiki:Building/Platforms/Windows MinGW/MSYS/Cygwin] information for people new to using UNIX tools on Windows.
 * [wiki:Building/Preparation/Windows/MSYS1 Using MSYS1] to build GHC (not recommended any more)
 * [wiki:Building/Windows/Cygwin Using Cygwin] to build GHC.
 * [wiki:Building/Windows/SSH Using SSH] on Windows.
 * [http://www.haskell.org/haskellwiki/Windows Guidance on how to use Haskell on Windows]
