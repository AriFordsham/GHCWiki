
[[PageOutline]]

= Layout of important files and directories =

Everything starts with the main GHC repository (see [wiki:Building/GettingTheSources]).   The buld system calls that directory `$(TOP)`.  All the paths below are relative to `$(TOP)`.

== Files in `$(TOP)` ==

 '''`darcs-all`'''::
  This script allows you to get or pull all the additional repositories that you need to build GHC.  The command-line interface is documented in the file itself.

 '''`packages`'''::
  Lists the packages that `darcs-all` should get or pull.  `packages` is looked at only by `darcs-all`.

 '''`validate`''':: Run `validate` before committing (see [wiki:TestingPatches]).  The script is documented in the file itself.

== `libraries/` ==

The `libraries/` directory contains all the packages that GHC needs to build.  It has one sub-directory for each package repository (e.g. `base`, `haskell98`, `random`). Usually each such repository builds just one package but sometimes more than one (e.g DPH).

 * '''`libraries/cabal-bin.hs`''' is a little program we use for building the libraries. It's similar to cabal-install, but without the dependencies on `http` etc.
 * '''`libraries/ifBuildable/`''' is a utility that we use in the build system. It allows the build to continue if an extralib is not buildable (e.g., if we are missing a C library that an extralib depends on then we can still build the compiler). We expect this to disappear soon, when extralibs are removed.
 * '''`libraries/bootstrapping/`''': In order to build `cabal-bin` we need to compile `cabal-bin.hs`, as well as a few libraries that we can't rely on the bootstrapping compiler having. We put the `.hi` and `.o` files that result from this in `bootstrapping/`.

== `utils/`, `libffi/` ==

The `utils` directory contains support utilities that GHC uses.  Some of these are themselves separate repositories that `darcs-all` pulls; others are part of the main GHC repository. These utils may be built with the bootstrapping compiler, for use during the build, or with the stage1 compiler, for installing. Some of them are built with both; we can't install the utils built with the bootstrapping compiler as they may use different versions of C libraries.

''Why isn't libffi in utils/?''

== `compiler/`, `ghc/`, `rts/`, `docs/`, `includes/` == 

These directories contain the main GHC compiler, runtime system, and documentation.
 * '''`compiler/ghc.cabal`''': the Cabal file for GHC.  If you add a module to GHC's source code, you must add it in the `ghc.cabal` file too, else you'll get link errors.

== `testsuite/`, `nofib/` == 

The `testsuite/` and `nofib/` directories contain apparatus for testing GHC.  Each is a separate repository, which can be gotten with `darcs-all`.

== Stuff that appears only in a build tree ==

    * '''`ghc/stage1-inplace/`, `ghc/stage2-inplace/`'''
      The in-place installations of GHC, so you can use the compiler in a build tree.

    * '''`compiler/stage1/`, `ghc/stage2plus/`'''
      These directories contain `ghc_boot_platform.h`, which contains various `#define`s needed when building GHC. These are different depending on whether we are building stage1 or a later stage.

    * '''`.../dist*/`'''
      In many directories, `dist*` subdirectories appear. These are where Cabal puts all of the files generated while building.
