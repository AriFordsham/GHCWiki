= Getting the GHC Sources =

There are two ways to get sources to GHC: download a source distribution, or get the sources directly from our repository using [http://git-scm.com/ git].

== Source distributions ==

A source distribution is a file like {{{ghc-7.8.3-src.tar.xz}}}, which contains a complete snapshot of the source tree for a particular version of GHC. Source distributions for all versions of GHC are available from the [http://www.haskell.org/ghc/download download page].

Source distributions are easier to build, because we also include the output from running certain external tools like [http://haskell.org/happy Happy], so you don't need to install these tools (see below for more).

== Using git: preliminary setup ==

Please make sure that you have the correct name and email address set for Git that you want your commits to be recorded as. Make sure you use the same name and email on all your machines so we can easily track a single author. This can be done in Git by running:

{{{
$ git config --global user.name "Firstname Lastname"
$ git config --global user.email "your_email@youremail.com"
}}}

Then, '''if you are on Windows''', ensure that git handles line-endings sanely by running:

{{{
$ git config --global core.autocrlf false
}}}

== Quickly getting the GHC source repository ==

The first thing to do is install [http://git-scm.com/ git]. You'll also need some tools - see [wiki:Building/Preparation] for details.

'''Note:''' The following directions are valid for cloning GHC 7.9 or newer. For cloning GHC 7.8 or earlier, see [#checkout-old-branch below].

On Unix-like systems (Linux, OS X), a complete GHC source tree can be obtained (located in `ghc`) by saying:

{{{
$ git clone --recursive git://git.haskell.org/ghc.git
}}}

On Windows, you need to additionally fetch an extra repository containing some build tools. After running `clone`:

{{{
$ cd ghc/
$ git clone git://git.haskell.org/ghc-tarballs.git
}}}

A source tree consists of more than one repository: at the top level there is the main GHC repository, and certain subdirectories contain separate git repositories (for a list see [wiki:Repositories]).

And then read [wiki:WorkingConventions/Git Git Working Conventions] for instructions on how to use Git with GHC development.

{{{#!box note

 - `git.haskell.org` is reachable via IPv6 as well as IPv4.

 - If you're behind a **firewall blocking port 9418** (or `git clone git://...` fails for some other reason), try replacing `git://` by `http://` or `https://` in the instructions above.

 - If you have **push access**, see the [wiki:WorkingConventions/Git#Pushaccess Git Working Conventions - Push Access] for info on setting your push URLs.
}}}

== Making a local clone ==

{{{#!box note
TODO: investigate&document `--reference`-based `git clone` which may work better with submodules and doesn't require resetting the origin Repo back to `git.haskell.org`
}}}

You can make a local clone of a GHC tree with

{{{
 $ git clone ~/ghc ~/ghc-branch
}}}

where `~/ghc` is the repository you want to branch and `~/ghc-branch` is where you want to put the branch. Then use `sync-all` (see [wiki:/Building/SyncAll]) to clone the rest of the repositories.  Note that the `origin` for the local clone will point back to the repository that it was cloned from - if you want `origin` to point back to the main GHC repo then do this:

{{{
  $ ./sync-all -r git://git.haskell.org remote set-url origin
}}}

== Getting a branch (GHC 7.9 or later) ==

The above instructions will get the HEAD, the main trunk of GHC development. There is also a branch for each stable release line, as well as branches for development of major new features. The active branches are listed on [wiki:ActiveBranches].

To get a branch, you need to get from a repo that contains the branch; in particular, local clones of the central repo will normally not include the branches that are in the central repo.

You can clone a specific branch via:

{{{
  $ git clone -b <branchname> --recursive git://git.haskell.org/ghc.git ghc-<branchname>
}}}

and switch between branches on an existing clone by

{{{
  $ git checkout <other-branchname>
  $ git submodule update --init
}}}

'''Note:''' The instructions above apply to branches that contain the commit [db19c665ec5055c2193b2174519866045aeff09a/ghc] which converted all sub-repos into submodules. To clone a branch prior to that commit, follow the instructions below instead. It is best not to attempt to cross that commit with `git checkout`; instead make a fresh clone of the desired branch directly.

== Getting a branch (GHC 7.8 or earlier) == #checkout-old-branch

It is best to check out the desired branch directly in a fresh clone, as follows:

{{{
  $ git clone -b ghc-7.8 git://git.haskell.org/ghc.git ghc-7.8
  $ cd ghc-7.8
  $ ./sync-all get -b ghc-7.8
}}}

== Getting a tag ==

{{{#!box note
The commands given below may soon be outdated, starting with GHC 7.10.1, you can simply clone a specific tag via:

`git clone -b ghc-7.10.1-release --recursive git://git.haskell.org/ghc.git ghc-7.10.1`
}}}

Each release is tagged in the git repository, making it possible to check out an old version of GHC by tag. To see all available tags, run `git tag` in the GHC repository.

To check out a specific version of GHC, run

{{{

  $ git clone http://git.haskell.org/ghc.git
  $ cd ghc
  $ git checkout <tag>
  $ ./sync-all get
}}}

For checking out a tag after you have already done `./sync-all [OPTIONS] get`

{{{
  $ shopt -s extglob
  $ rm -rf !(.git)
  $ git checkout -f <tag>
  $ ./sync-all get
}}}

== Getting a GHC repository from !GitHub ==

The official mirror for GHC on GitHub is located at [https://github.com/ghc/ghc].

=== New method ===

You don't need `./sync-all` anymore and can use Git commands directly, if you configure the following Git url rewrites to account for the different naming scheme on GitHub (due to GitHub not supporting `/` in repository names) before cloning (those rules are persisted in `${HOME}/.gitconfig` so you need to perform it only once):

{{{#!sh 
git config --global url."git://github.com/ghc/packages-".insteadOf     git://github.com/ghc/packages/ 
git config --global url."http://github.com/ghc/packages-".insteadOf    http://github.com/ghc/packages/ 
git config --global url."https://github.com/ghc/packages-".insteadOf   https://github.com/ghc/packages/ 
git config --global url."ssh://git@github.com/ghc/packages-".insteadOf ssh://git@github.com/ghc/packages/ 
git config --global url."git@github.com:/ghc/packages-".insteadOf      git@github.com:/ghc/packages/ 
}}} 

and then simply proceed by

{{{#!sh
git clone --recursive git://github.com/ghc/ghc
}}}

=== Old method ===

{{{
  $ git clone git://github.com/ghc/ghc
  $ cd ghc
  $ ./sync-all get
}}}

If you want to clone your own fork instead, add an argument to `sync-all` to tell it where it can find the other repositories it needs.

{{{
  $ git clone <your preferred github.com GHC fork URL> ghc
  $ cd ghc
  $ ./sync-all -r git://github.com/ghc get
}}}