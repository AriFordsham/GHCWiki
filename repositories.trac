[[PageOutline]]

{{{#!box warning
This page is a WIP and will subsume Repositories/Upstream
}}}

= GHC Repositories =

This page lists the active repositories relating to GHC. For instructions on actually getting a GHC source tree, see [wiki:Building/GettingTheSources Getting The Sources].

For read-only browsing, you can use the:
 * [source: Trac source browser]
 * [http://git.haskell.org/ Gitweb browser @ git.haskell.org]
 * [http://github.com/ghc/ghc GitHub GHC mirror]

For info on the active branches of the main GHC repo, see
 * [wiki:ActiveBranches]

GHC's repos use git; see [wiki:WorkingConventions/Git Git Working Conventions]. For darcs-related stuff see [wiki:DarcsToGit Darcs To Git] and [wiki:GitForDarcsUsers Git For Darcs Users].

== Repository workflows ==

On the [wiki:Repositories/Upstream upstream repositories] page, you can see a basic overview of where repositories are located.

But how does this work? The basic breakdown is this:

=== Repository is owned by GHC HQ ===

If the repository is owned by GHC HQ, for example, the `directory` package, just do what you normally do - push to that repository. You're done.

=== Repository is maintained by an upstream, not GHC HQ ===

**Note**: almost every upstream repository is a git submodule, as it stands. See below for exceptions.

 * Send a patch upstream. Get it merged.

 * Once that is done, just update the submodule:

 {{{
cd libraries/foo
git reset --hard some_commit_id
cd ../..
git commit -asm "Update foo submodule"
./sync-all push
}}}
 where `some_commit_id` should be the commit ID of the change you pushed. For example, if you pushed three changes (where 'Commit #3' is the latest HEAD):

 {{{
026d0f64723729823ef29991218c7a15d8d37264 - Commit #1
235da0f3e38c2b4c489a82778a5fd84a895cb693 - Commit #2
0667f01823552caf97c4d6e8b876b1d9db00a172 - Commit #3
}}}
 then `some_commit_id = 0667f01823552caf97c4d6e8b876b1d9db00a172`

 * Done!

=== Submodule reference validation ===

There is a problem with submodules, in that it would be possible to commit a submodule change to `ghc.git`, which points to an invalid commit. For example, perhaps you make a change to `haddock` and `ghc`. You might accidentally push to `ghc` before pushing to Haddock, or worse, you might forget.

For this reason, the GHC repository has commit hooks that validate submodule references. Any time you update a submodule, you must:

 * Have already pushed the new changes upstream, in a way `git` can find them.

 * You **must** include the word '**submodule**' in your commit message.

If either of these assumptions are violated, your push will fail.

== Full repository breakdown ==

A GHC source tree is made of a collection of repositories. The script [wiki:Building/SyncAll sync-all] knows how to apply git commands to the whole collection of repositories at once, for example to pull changes from the upstream repositories.

Here is a list of the repositories that GHC uses.  The columns have the following meaning

 * '''Location in tree''': where in the source tree this repository sits.

 * '''Upstream repo?''': if "yes", this library is maintained by someone else, 
   and its master repo is somewhere else.  See [wiki:Repositories/Upstream].

 * '''Reqd to build?''': is "no" if this library is not required to build GHC. We have a few of these because we use them for tests and suchlike.

 * '''Installed?''': is "no" if the library is not installed in a GHC installation, and "extra" if it is only installed if `InstallExtraPackages` is `YES`. All others are installed with GHC. See the [wiki:Commentary/Libraries libraries page] for more info.

 * '''GHC repo''': in every case there is a repo on `http://git.haskell.org/`, which contains the bits we use for building GHC every night. For libraries with upstream repos, this is just a lagging mirror of the master (see [wiki:Repositories/Upstream]).  The read-only HTTP URL for the repo is `http://git.haskell.org/<table-entry>`.  To get a read/write URL, replace HTTP prefix `http://git.haskell.org` with the SSH prefix `ssh://git@git.haskell.org`. 


{{{
#!html
<table border="1">
<tr><td><strong>Location in tree</strong></td>   <td> <strong>Upstream repo?</strong></td> <td><strong>Reqd to build?</strong></td>   <td><strong>Installed?</strong></td> <td><strong>GHC repo http://git.haskell.org/...</strong></td></tr>
<tr><td>. (ghc itself)</td>                    <td>     </td> <td>     </td> <td>     </td> <td>ghc.git</td></tr>
<tr><td>ghc-tarballs</td>                      <td>     </td> <td>     </td> <td> N/A </td> <td>ghc-tarballs.git</td></tr>
<tr><td>utils/hsc2hs</td>                      <td>     </td> <td>     </td> <td>     </td> <td>hsc2hs.git</td></tr>
<tr><td>utils/haddock</td>                     <td>     </td> <td>     </td> <td>     </td> <td>haddock.git</td></tr>
<tr><td>nofib</td>                  	       <td>     </td> <td>     </td> <td> N/A </td> <td>nofib.git</td></tr>
<tr><td>libraries/array</td>                   <td>     </td> <td>     </td> <td>     </td> <td>packages/array.git</td></tr>
<tr><td>libraries/binary</td>                  <td> yes </td> <td>     </td> <td>     </td> <td>packages/binary.git</td></tr>
<tr><td>libraries/bytestring</td>              <td> yes </td> <td>     </td> <td>     </td> <td>packages/bytestring.git</td></tr>
<tr><td>libraries/Cabal</td>                   <td> yes </td> <td>     </td> <td>     </td> <td>packages/Cabal.git</td></tr>
<tr><td>libraries/containers</td>              <td> yes </td> <td>     </td> <td>     </td> <td>packages/containers.git</td></tr>
<tr><td>libraries/deepseq</td>      	       <td>     </td> <td>     </td> <td>     </td> <td>packages/deepseq.git</td></tr>
<tr><td>libraries/directory</td>               <td>     </td> <td>     </td> <td>     </td> <td>packages/directory.git</td></tr>
<tr><td>libraries/extensible-exceptions</td>   <td>     </td> <td>     </td> <td>     </td> <td>packages/extensible-exceptions.git</td></tr>
<tr><td>libraries/filepath</td>                <td>     </td> <td>     </td> <td>     </td> <td>packages/filepath.git</td></tr>
<tr><td>libraries/haskeline</td>               <td> yes </td> <td>     </td> <td> no  </td> <td>packages/haskeline.git</td></tr>
<tr><td>libraries/haskell98</td>               <td>     </td> <td>     </td> <td>     </td> <td>packages/haskell98.git</td></tr>
<tr><td>libraries/haskell2010</td>             <td>     </td> <td>     </td> <td>     </td> <td>packages/haskell2010.git</td></tr>
<tr><td>libraries/hoopl</td>                   <td>     </td> <td>     </td> <td>     </td> <td>packages/hoopl.git</td></tr>
<tr><td>libraries/hpc</td>                     <td>     </td> <td>     </td> <td>     </td> <td>packages/hpc.git</td></tr>
<tr><td>libraries/old-locale</td>              <td>     </td> <td>     </td> <td>     </td> <td>packages/old-locale.git</td></tr>
<tr><td>libraries/old-time</td>                <td>     </td> <td>     </td> <td>     </td> <td>packages/old-time.git</td></tr>
<tr><td>libraries/pretty</td>                  <td> yes </td> <td>     </td> <td>     </td> <td>packages/pretty.git</td></tr>
<tr><td>libraries/process</td>                 <td>     </td> <td>     </td> <td>     </td> <td>packages/process.git</td></tr>
<tr><td>libraries/terminfo</td>     	       <td> yes </td> <td>     </td> <td> no  </td> <td>packages/terminfo.git</td></tr>
<tr><td>libraries/time</td>         	       <td> yes </td> <td>     </td> <td>     </td> <td>packages/time.git</td></tr>
<tr><td>libraries/transformers</td> 	       <td> yes </td> <td>     </td> <td>     </td> <td>packages/transformers.git</td></tr>
<tr><td>libraries/unix</td>         	       <td>     </td> <td>     </td> <td>     </td> <td>packages/unix.git</td></tr>
<tr><td>libraries/utf8-string</td>  	       <td> yes </td> <td>     </td> <td>     </td> <td>packages/utf8-string.git</td></tr>
<tr><td>libraries/Win32</td>	    	       <td> yes </td> <td>     </td> <td>     </td> <td>packages/Win32.git</td></tr>
<tr><td>libraries/xhtml</td>	    	       <td> yes </td> <td>     </td> <td> no  </td> <td>packages/xhtml.git</td></tr>
<tr><td>libraries/random</td>                  <td> yes </td> <td>     </td> <td>extra</td> <td>packages/random.git</td></tr>
<tr><td>libraries/primitive</td>       	       <td> yes </td> <td>     </td> <td>extra</td> <td>packages/primitive.git</td></tr>
<tr><td>libraries/vector</td>       	       <td> yes </td> <td>     </td> <td>extra</td> <td>packages/vector.git</td></tr>
<tr><td>libraries/dph</td>          	       <td>     </td> <td>     </td> <td>extra</td> <td>packages/dph.git</td></tr>
<tr><td>libraries/parallel</td>     	       <td>     </td> <td> no  </td> <td>extra</td> <td>packages/parallel.git</td></tr>
<tr><td>libraries/stm</td>          	       <td>     </td> <td> no  </td> <td>extra</td> <td>packages/stm.git</td></tr>
</table>
}}}

=== The 'packages' file ===

The master list of repositories is in the file [[GhcFile(packages)]], and this is where the `sync-all` script finds out about which repositories make up the complete tree.  It duplicates the information in the above table; indeed, it is really the authoritative version (so complain if the table and file differ!).

The "`tag`" in the master table in [[GhcFile(packages)]] has the following significance:

 * '''"`-`"''': [wiki:Commentary/Libraries boot libraries], necessary to build GHC
 * '''"`testsuite`"''': GHC's [wiki:Building/RunningTests regression tests], not necessary for a build, but is necessary if you're working on GHC
 * '''"`nofib`"''': GHC's [wiki:Building/RunningNoFib nofib benchmark suite]
 * '''"`dph`"''': packages for [wiki:DataParallel Data Parallel Haskell], which is not shipped with GHC but we test all changes to GHC against these repositories so they are usually included in a checked-out source tree.
 * '''"`extra`"''': extra packages you might want to include in a build (the `parallel` package, for example), but aren't necessary to get a working GHC.

See the [wiki:Commentary/Libraries] page for more information about GHC's libraries.

== Mirroring new packages to !GitHub ==

Currently, all our repositories are being mirrored to !GitHub by !GitHub themselves. If you wish to add/remove a repository you need to email !GitHub support at support@github.com and ask them to do it. Currently there is no way to administer this ourselves.
