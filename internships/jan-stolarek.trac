= Jan Stolarek's internship notes =

= Back-end notes =

== Some interesting tickets ==
  * #605 - Optimisation: strict enumerations
  * #1498 - Optimisation: eliminate unnecessary heap check in recursive function. 
  * #1600 - Optimisation: CPR the results of IO
  * #2289 - Needless reboxing of values when returning from a tight loop
  * #2387 - Optimizer misses unboxing opportunity
  * #2450 - Data.Complex.magnitude squares using ^(2 :: Int), which is slow
  * #2731 - Avoid unnecessary evaluation when unpacking constructors
  * #2823 - Another arity expansion bug
  * #4470 - Loop optimization: identical counters
  * #4937 - Remove indirections caused by sum types, such as Maybe
  * #5567 - LLVM: Improve alias analysis / performance [wiki:BackEndNotes#Heapstackchecks BackEndNotes] page has some discussion of this.
  * #7198 - New codegen more than doubles compile time of T3294
  * #8048 - Register spilling produces ineffecient/highly contending code

== Notes on the wiki ==
  * [wiki:Commentary/Compiler/NewCodeGen/Cleanup]
  * [wiki:Commentary/Compiler/NewCodeGenStupidity]
  * [http://darcs.haskell.org/ghc/compiler/cmm/cmm-notes cmm-notes]

= Various stuff =
Tickets that I could potentially look into:

  * #3070 - floor(0/0) should not be defined
  * #3676 - realToFrac doesn't sanely convert between floating types
  * #3744 - Comparisons against minBound/maxBound not optimised
  * #4101 - Primitive constant unfolding
  * #5615 - ghc produces poor code for `div` with constant powers of 2.
  * #7858 - Fix definitions of abs/signum for !Floats/Doubles.

Some LLVM notes that may be useful:
  - [wiki:Commentary/Compiler/Backends/LLVM/Alias LLVM Alias Notes]
  - [http://blog.davidterei.com/2011/09/ghc-project-for-all.html David Terei's LLVM blog post]
  - [http://blog.omega-prime.co.uk/?p=135 Max Bolingbroke's LLVM blog entry]
  - [https://github.com/mlite/HsLlvm Implementation of various LLVM optimisations using Hoopl] - '''this seems very relevant'''
