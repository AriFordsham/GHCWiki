
= The GHC Builder =

The '''GHC builder''' is a client/server system that allows us to build and test GHC on lots of different computers scattered around the world (the ''clients'', or ''build slaves''), and aggregate the test results centrally (the ''server'').

Each night we build GHC on each slave, in various different ways, run the test suite and performance benchmarks, and mail the results to the `cvs-ghc@haskell.org` mailing list.  

== Seeing build results ==

The build results are uploaded to http://darcs.haskell.org/ghcBuilder/builders/

== Can you offer a build slave? ==

We're always keen to add more build slaves to the setup. If a platform is represented in the nightly builds, it's we can identify and fix problems specific to that platform much more quickly.  If you'd like to join the fun, please let us know at [mailto:cvs-ghc@haskell.org]. 


= How to set up a build slave =

The GHC Builder is written in Haskell as a pair of Cabal packages (one for the clients/slaves, and one for the server).

== Install OpenSSL ==

 * On Windows, install OpenSSL from here (not the Light Version): [http://www.openssl.org/related/binaries.html]
 * On Linux, get OpenSSL from your distro.  E.g. install `openssl-devel` on !RedHat-derived distros (e.g. Fedora), or `openssl-dev` on Debian-derived distros (e.g. Ubuntu)
 * On FreeBSD, OpenSSL is included in the base system and it is also available as a [http://www.freshports.org/security/openssl port].
 * On Mac OS X, install openssl from [http://www.macports.org/]: `sudo port install openssl`.
 * On Solaris: depending on what Solaris version you run you either need to install pkg:/library/security/openssl package (Solaris 11 Express) or install SUNWopenssl-libraries, SUNWopenssl-include packages (Solaris 10)

== Install HsOpenSSL ==

On non-Windows:

{{{
cabal install HsOpenSSL
}}}

On Windows: You might have to add explicit include and lib directories:

{{{
cabal install --extra-include-dirs="c:/OpenSSL/include" --extra-lib-dirs="c:/OpenSSL"
}}}

== To create a new build slave ==

You can get the code for the builder with
{{{
darcs get http://darcs.haskell.org/builder/
}}}
or, if you have an account on darcs.haskell.org,
{{{
darcs get darcs.haskell.org:/srv/darcs/builder/
}}}
and then build the Cabal package in the `client/` subdirectory.

Once you have built it, pick a username (something fairly unique to you) and password, and send them to ghc@well-typed.com along with the time (and timezone) you want builds to happen and any extra information (e.g. "GNU make is gmake", or "builds need these lines added to mk/build.mk"). The username is used so we know which machine the build log came from, and the password is used to verify that the client is who it claims it is.

Then initialise the client by creating a new directory, and running:
{{{
builder-client init username password darcs.haskell.org
}}}
in it, where `username` and `password` are your username and password. This will create various files and subdirectories that the client will use. Then put a copy of http://darcs.haskell.org/ghcBuilder/cert/root.pem in `certs/` so that the client can verify that it is connecting to the right server.

You can now run the client with:
{{{
builder-client
}}}
or
{{{
builder-client -v
}}}
We recommend running in screen for now, as the client doesn't daemonise itself yet. The client will connect to the server, and the server will tell the client how and when to do builds. The client therefore needs to be left running unless you want to stop builds from happening.


